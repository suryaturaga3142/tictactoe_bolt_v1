
tictactoe_bolt_v1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d74  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003f6c  08003f6c  00004f6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f84  08003f84  0000514c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003f84  08003f84  00004f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003f8c  08003f8c  0000514c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f8c  08003f8c  00004f8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003f90  08003f90  00004f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003f94  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000000c  08003fa0  0000500c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000ac  08004040  000050ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000678  2000014c  080040e0  0000514c  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  200007c4  080040e0  000057c4  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0000514c  2**0
                  CONTENTS, READONLY
 14 .debug_info   000117ba  00000000  00000000  0000517a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002467  00000000  00000000  00016934  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000d28  00000000  00000000  00018da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000a1c  00000000  00000000  00019ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000286ab  00000000  00000000  0001a4e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000100e2  00000000  00000000  00042b8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f95b0  00000000  00000000  00052c71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0014c221  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000036c0  00000000  00000000  0014c264  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000006f  00000000  00000000  0014f924  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000014c 	.word	0x2000014c
 8000214:	00000000 	.word	0x00000000
 8000218:	08003f54 	.word	0x08003f54

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000150 	.word	0x20000150
 8000234:	08003f54 	.word	0x08003f54

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b988 	b.w	8000560 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	468e      	mov	lr, r1
 8000270:	4604      	mov	r4, r0
 8000272:	4688      	mov	r8, r1
 8000274:	2b00      	cmp	r3, #0
 8000276:	d14a      	bne.n	800030e <__udivmoddi4+0xa6>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d962      	bls.n	8000344 <__udivmoddi4+0xdc>
 800027e:	fab2 f682 	clz	r6, r2
 8000282:	b14e      	cbz	r6, 8000298 <__udivmoddi4+0x30>
 8000284:	f1c6 0320 	rsb	r3, r6, #32
 8000288:	fa01 f806 	lsl.w	r8, r1, r6
 800028c:	fa20 f303 	lsr.w	r3, r0, r3
 8000290:	40b7      	lsls	r7, r6
 8000292:	ea43 0808 	orr.w	r8, r3, r8
 8000296:	40b4      	lsls	r4, r6
 8000298:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800029c:	fa1f fc87 	uxth.w	ip, r7
 80002a0:	fbb8 f1fe 	udiv	r1, r8, lr
 80002a4:	0c23      	lsrs	r3, r4, #16
 80002a6:	fb0e 8811 	mls	r8, lr, r1, r8
 80002aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ae:	fb01 f20c 	mul.w	r2, r1, ip
 80002b2:	429a      	cmp	r2, r3
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0x62>
 80002b6:	18fb      	adds	r3, r7, r3
 80002b8:	f101 30ff 	add.w	r0, r1, #4294967295
 80002bc:	f080 80ea 	bcs.w	8000494 <__udivmoddi4+0x22c>
 80002c0:	429a      	cmp	r2, r3
 80002c2:	f240 80e7 	bls.w	8000494 <__udivmoddi4+0x22c>
 80002c6:	3902      	subs	r1, #2
 80002c8:	443b      	add	r3, r7
 80002ca:	1a9a      	subs	r2, r3, r2
 80002cc:	b2a3      	uxth	r3, r4
 80002ce:	fbb2 f0fe 	udiv	r0, r2, lr
 80002d2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002da:	fb00 fc0c 	mul.w	ip, r0, ip
 80002de:	459c      	cmp	ip, r3
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0x8e>
 80002e2:	18fb      	adds	r3, r7, r3
 80002e4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002e8:	f080 80d6 	bcs.w	8000498 <__udivmoddi4+0x230>
 80002ec:	459c      	cmp	ip, r3
 80002ee:	f240 80d3 	bls.w	8000498 <__udivmoddi4+0x230>
 80002f2:	443b      	add	r3, r7
 80002f4:	3802      	subs	r0, #2
 80002f6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002fa:	eba3 030c 	sub.w	r3, r3, ip
 80002fe:	2100      	movs	r1, #0
 8000300:	b11d      	cbz	r5, 800030a <__udivmoddi4+0xa2>
 8000302:	40f3      	lsrs	r3, r6
 8000304:	2200      	movs	r2, #0
 8000306:	e9c5 3200 	strd	r3, r2, [r5]
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d905      	bls.n	800031e <__udivmoddi4+0xb6>
 8000312:	b10d      	cbz	r5, 8000318 <__udivmoddi4+0xb0>
 8000314:	e9c5 0100 	strd	r0, r1, [r5]
 8000318:	2100      	movs	r1, #0
 800031a:	4608      	mov	r0, r1
 800031c:	e7f5      	b.n	800030a <__udivmoddi4+0xa2>
 800031e:	fab3 f183 	clz	r1, r3
 8000322:	2900      	cmp	r1, #0
 8000324:	d146      	bne.n	80003b4 <__udivmoddi4+0x14c>
 8000326:	4573      	cmp	r3, lr
 8000328:	d302      	bcc.n	8000330 <__udivmoddi4+0xc8>
 800032a:	4282      	cmp	r2, r0
 800032c:	f200 8105 	bhi.w	800053a <__udivmoddi4+0x2d2>
 8000330:	1a84      	subs	r4, r0, r2
 8000332:	eb6e 0203 	sbc.w	r2, lr, r3
 8000336:	2001      	movs	r0, #1
 8000338:	4690      	mov	r8, r2
 800033a:	2d00      	cmp	r5, #0
 800033c:	d0e5      	beq.n	800030a <__udivmoddi4+0xa2>
 800033e:	e9c5 4800 	strd	r4, r8, [r5]
 8000342:	e7e2      	b.n	800030a <__udivmoddi4+0xa2>
 8000344:	2a00      	cmp	r2, #0
 8000346:	f000 8090 	beq.w	800046a <__udivmoddi4+0x202>
 800034a:	fab2 f682 	clz	r6, r2
 800034e:	2e00      	cmp	r6, #0
 8000350:	f040 80a4 	bne.w	800049c <__udivmoddi4+0x234>
 8000354:	1a8a      	subs	r2, r1, r2
 8000356:	0c03      	lsrs	r3, r0, #16
 8000358:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035c:	b280      	uxth	r0, r0
 800035e:	b2bc      	uxth	r4, r7
 8000360:	2101      	movs	r1, #1
 8000362:	fbb2 fcfe 	udiv	ip, r2, lr
 8000366:	fb0e 221c 	mls	r2, lr, ip, r2
 800036a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800036e:	fb04 f20c 	mul.w	r2, r4, ip
 8000372:	429a      	cmp	r2, r3
 8000374:	d907      	bls.n	8000386 <__udivmoddi4+0x11e>
 8000376:	18fb      	adds	r3, r7, r3
 8000378:	f10c 38ff 	add.w	r8, ip, #4294967295
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x11c>
 800037e:	429a      	cmp	r2, r3
 8000380:	f200 80e0 	bhi.w	8000544 <__udivmoddi4+0x2dc>
 8000384:	46c4      	mov	ip, r8
 8000386:	1a9b      	subs	r3, r3, r2
 8000388:	fbb3 f2fe 	udiv	r2, r3, lr
 800038c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000390:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000394:	fb02 f404 	mul.w	r4, r2, r4
 8000398:	429c      	cmp	r4, r3
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x144>
 800039c:	18fb      	adds	r3, r7, r3
 800039e:	f102 30ff 	add.w	r0, r2, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x142>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f200 80ca 	bhi.w	800053e <__udivmoddi4+0x2d6>
 80003aa:	4602      	mov	r2, r0
 80003ac:	1b1b      	subs	r3, r3, r4
 80003ae:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003b2:	e7a5      	b.n	8000300 <__udivmoddi4+0x98>
 80003b4:	f1c1 0620 	rsb	r6, r1, #32
 80003b8:	408b      	lsls	r3, r1
 80003ba:	fa22 f706 	lsr.w	r7, r2, r6
 80003be:	431f      	orrs	r7, r3
 80003c0:	fa0e f401 	lsl.w	r4, lr, r1
 80003c4:	fa20 f306 	lsr.w	r3, r0, r6
 80003c8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003cc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003d0:	4323      	orrs	r3, r4
 80003d2:	fa00 f801 	lsl.w	r8, r0, r1
 80003d6:	fa1f fc87 	uxth.w	ip, r7
 80003da:	fbbe f0f9 	udiv	r0, lr, r9
 80003de:	0c1c      	lsrs	r4, r3, #16
 80003e0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003e4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003e8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003ec:	45a6      	cmp	lr, r4
 80003ee:	fa02 f201 	lsl.w	r2, r2, r1
 80003f2:	d909      	bls.n	8000408 <__udivmoddi4+0x1a0>
 80003f4:	193c      	adds	r4, r7, r4
 80003f6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003fa:	f080 809c 	bcs.w	8000536 <__udivmoddi4+0x2ce>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f240 8099 	bls.w	8000536 <__udivmoddi4+0x2ce>
 8000404:	3802      	subs	r0, #2
 8000406:	443c      	add	r4, r7
 8000408:	eba4 040e 	sub.w	r4, r4, lr
 800040c:	fa1f fe83 	uxth.w	lr, r3
 8000410:	fbb4 f3f9 	udiv	r3, r4, r9
 8000414:	fb09 4413 	mls	r4, r9, r3, r4
 8000418:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 800041c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000420:	45a4      	cmp	ip, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x1ce>
 8000424:	193c      	adds	r4, r7, r4
 8000426:	f103 3eff 	add.w	lr, r3, #4294967295
 800042a:	f080 8082 	bcs.w	8000532 <__udivmoddi4+0x2ca>
 800042e:	45a4      	cmp	ip, r4
 8000430:	d97f      	bls.n	8000532 <__udivmoddi4+0x2ca>
 8000432:	3b02      	subs	r3, #2
 8000434:	443c      	add	r4, r7
 8000436:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800043a:	eba4 040c 	sub.w	r4, r4, ip
 800043e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000442:	4564      	cmp	r4, ip
 8000444:	4673      	mov	r3, lr
 8000446:	46e1      	mov	r9, ip
 8000448:	d362      	bcc.n	8000510 <__udivmoddi4+0x2a8>
 800044a:	d05f      	beq.n	800050c <__udivmoddi4+0x2a4>
 800044c:	b15d      	cbz	r5, 8000466 <__udivmoddi4+0x1fe>
 800044e:	ebb8 0203 	subs.w	r2, r8, r3
 8000452:	eb64 0409 	sbc.w	r4, r4, r9
 8000456:	fa04 f606 	lsl.w	r6, r4, r6
 800045a:	fa22 f301 	lsr.w	r3, r2, r1
 800045e:	431e      	orrs	r6, r3
 8000460:	40cc      	lsrs	r4, r1
 8000462:	e9c5 6400 	strd	r6, r4, [r5]
 8000466:	2100      	movs	r1, #0
 8000468:	e74f      	b.n	800030a <__udivmoddi4+0xa2>
 800046a:	fbb1 fcf2 	udiv	ip, r1, r2
 800046e:	0c01      	lsrs	r1, r0, #16
 8000470:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000474:	b280      	uxth	r0, r0
 8000476:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800047a:	463b      	mov	r3, r7
 800047c:	4638      	mov	r0, r7
 800047e:	463c      	mov	r4, r7
 8000480:	46b8      	mov	r8, r7
 8000482:	46be      	mov	lr, r7
 8000484:	2620      	movs	r6, #32
 8000486:	fbb1 f1f7 	udiv	r1, r1, r7
 800048a:	eba2 0208 	sub.w	r2, r2, r8
 800048e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000492:	e766      	b.n	8000362 <__udivmoddi4+0xfa>
 8000494:	4601      	mov	r1, r0
 8000496:	e718      	b.n	80002ca <__udivmoddi4+0x62>
 8000498:	4610      	mov	r0, r2
 800049a:	e72c      	b.n	80002f6 <__udivmoddi4+0x8e>
 800049c:	f1c6 0220 	rsb	r2, r6, #32
 80004a0:	fa2e f302 	lsr.w	r3, lr, r2
 80004a4:	40b7      	lsls	r7, r6
 80004a6:	40b1      	lsls	r1, r6
 80004a8:	fa20 f202 	lsr.w	r2, r0, r2
 80004ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b0:	430a      	orrs	r2, r1
 80004b2:	fbb3 f8fe 	udiv	r8, r3, lr
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	fb0e 3318 	mls	r3, lr, r8, r3
 80004bc:	0c11      	lsrs	r1, r2, #16
 80004be:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c2:	fb08 f904 	mul.w	r9, r8, r4
 80004c6:	40b0      	lsls	r0, r6
 80004c8:	4589      	cmp	r9, r1
 80004ca:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ce:	b280      	uxth	r0, r0
 80004d0:	d93e      	bls.n	8000550 <__udivmoddi4+0x2e8>
 80004d2:	1879      	adds	r1, r7, r1
 80004d4:	f108 3cff 	add.w	ip, r8, #4294967295
 80004d8:	d201      	bcs.n	80004de <__udivmoddi4+0x276>
 80004da:	4589      	cmp	r9, r1
 80004dc:	d81f      	bhi.n	800051e <__udivmoddi4+0x2b6>
 80004de:	eba1 0109 	sub.w	r1, r1, r9
 80004e2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e6:	fb09 f804 	mul.w	r8, r9, r4
 80004ea:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ee:	b292      	uxth	r2, r2
 80004f0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004f4:	4542      	cmp	r2, r8
 80004f6:	d229      	bcs.n	800054c <__udivmoddi4+0x2e4>
 80004f8:	18ba      	adds	r2, r7, r2
 80004fa:	f109 31ff 	add.w	r1, r9, #4294967295
 80004fe:	d2c4      	bcs.n	800048a <__udivmoddi4+0x222>
 8000500:	4542      	cmp	r2, r8
 8000502:	d2c2      	bcs.n	800048a <__udivmoddi4+0x222>
 8000504:	f1a9 0102 	sub.w	r1, r9, #2
 8000508:	443a      	add	r2, r7
 800050a:	e7be      	b.n	800048a <__udivmoddi4+0x222>
 800050c:	45f0      	cmp	r8, lr
 800050e:	d29d      	bcs.n	800044c <__udivmoddi4+0x1e4>
 8000510:	ebbe 0302 	subs.w	r3, lr, r2
 8000514:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000518:	3801      	subs	r0, #1
 800051a:	46e1      	mov	r9, ip
 800051c:	e796      	b.n	800044c <__udivmoddi4+0x1e4>
 800051e:	eba7 0909 	sub.w	r9, r7, r9
 8000522:	4449      	add	r1, r9
 8000524:	f1a8 0c02 	sub.w	ip, r8, #2
 8000528:	fbb1 f9fe 	udiv	r9, r1, lr
 800052c:	fb09 f804 	mul.w	r8, r9, r4
 8000530:	e7db      	b.n	80004ea <__udivmoddi4+0x282>
 8000532:	4673      	mov	r3, lr
 8000534:	e77f      	b.n	8000436 <__udivmoddi4+0x1ce>
 8000536:	4650      	mov	r0, sl
 8000538:	e766      	b.n	8000408 <__udivmoddi4+0x1a0>
 800053a:	4608      	mov	r0, r1
 800053c:	e6fd      	b.n	800033a <__udivmoddi4+0xd2>
 800053e:	443b      	add	r3, r7
 8000540:	3a02      	subs	r2, #2
 8000542:	e733      	b.n	80003ac <__udivmoddi4+0x144>
 8000544:	f1ac 0c02 	sub.w	ip, ip, #2
 8000548:	443b      	add	r3, r7
 800054a:	e71c      	b.n	8000386 <__udivmoddi4+0x11e>
 800054c:	4649      	mov	r1, r9
 800054e:	e79c      	b.n	800048a <__udivmoddi4+0x222>
 8000550:	eba1 0109 	sub.w	r1, r1, r9
 8000554:	46c4      	mov	ip, r8
 8000556:	fbb1 f9fe 	udiv	r9, r1, lr
 800055a:	fb09 f804 	mul.w	r8, r9, r4
 800055e:	e7c4      	b.n	80004ea <__udivmoddi4+0x282>

08000560 <__aeabi_idiv0>:
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop

08000564 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000568:	f000 fbf3 	bl	8000d52 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056c:	f000 f80a 	bl	8000584 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000570:	f000 f926 	bl	80007c0 <MX_GPIO_Init>
  MX_ETH_Init();
 8000574:	f000 f878 	bl	8000668 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000578:	f000 f8c4 	bl	8000704 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800057c:	f000 f8f2 	bl	8000764 <MX_USB_OTG_FS_PCD_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000580:	bf00      	nop
 8000582:	e7fd      	b.n	8000580 <main+0x1c>

08000584 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b094      	sub	sp, #80	@ 0x50
 8000588:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058a:	f107 031c 	add.w	r3, r7, #28
 800058e:	2234      	movs	r2, #52	@ 0x34
 8000590:	2100      	movs	r1, #0
 8000592:	4618      	mov	r0, r3
 8000594:	f003 fcb2 	bl	8003efc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000598:	f107 0308 	add.w	r3, r7, #8
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	605a      	str	r2, [r3, #4]
 80005a2:	609a      	str	r2, [r3, #8]
 80005a4:	60da      	str	r2, [r3, #12]
 80005a6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005a8:	f001 fb88 	bl	8001cbc <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ac:	4b2c      	ldr	r3, [pc, #176]	@ (8000660 <SystemClock_Config+0xdc>)
 80005ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005b0:	4a2b      	ldr	r2, [pc, #172]	@ (8000660 <SystemClock_Config+0xdc>)
 80005b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80005b8:	4b29      	ldr	r3, [pc, #164]	@ (8000660 <SystemClock_Config+0xdc>)
 80005ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005c0:	607b      	str	r3, [r7, #4]
 80005c2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005c4:	4b27      	ldr	r3, [pc, #156]	@ (8000664 <SystemClock_Config+0xe0>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005cc:	4a25      	ldr	r2, [pc, #148]	@ (8000664 <SystemClock_Config+0xe0>)
 80005ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005d2:	6013      	str	r3, [r2, #0]
 80005d4:	4b23      	ldr	r3, [pc, #140]	@ (8000664 <SystemClock_Config+0xe0>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005dc:	603b      	str	r3, [r7, #0]
 80005de:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005e0:	2301      	movs	r3, #1
 80005e2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005e4:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80005e8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ea:	2302      	movs	r3, #2
 80005ec:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ee:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005f2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005f4:	2304      	movs	r3, #4
 80005f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80005f8:	2360      	movs	r3, #96	@ 0x60
 80005fa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005fc:	2302      	movs	r3, #2
 80005fe:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000600:	2304      	movs	r3, #4
 8000602:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000604:	2302      	movs	r3, #2
 8000606:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000608:	f107 031c 	add.w	r3, r7, #28
 800060c:	4618      	mov	r0, r3
 800060e:	f001 fbb5 	bl	8001d7c <HAL_RCC_OscConfig>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000618:	f000 f974 	bl	8000904 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800061c:	f001 fb5e 	bl	8001cdc <HAL_PWREx_EnableOverDrive>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000626:	f000 f96d 	bl	8000904 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800062a:	230f      	movs	r3, #15
 800062c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800062e:	2302      	movs	r3, #2
 8000630:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000632:	2300      	movs	r3, #0
 8000634:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000636:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800063a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800063c:	2300      	movs	r3, #0
 800063e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000640:	f107 0308 	add.w	r3, r7, #8
 8000644:	2103      	movs	r1, #3
 8000646:	4618      	mov	r0, r3
 8000648:	f001 fe46 	bl	80022d8 <HAL_RCC_ClockConfig>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000652:	f000 f957 	bl	8000904 <Error_Handler>
  }
}
 8000656:	bf00      	nop
 8000658:	3750      	adds	r7, #80	@ 0x50
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	40023800 	.word	0x40023800
 8000664:	40007000 	.word	0x40007000

08000668 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800066c:	4b1f      	ldr	r3, [pc, #124]	@ (80006ec <MX_ETH_Init+0x84>)
 800066e:	4a20      	ldr	r2, [pc, #128]	@ (80006f0 <MX_ETH_Init+0x88>)
 8000670:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000672:	4b20      	ldr	r3, [pc, #128]	@ (80006f4 <MX_ETH_Init+0x8c>)
 8000674:	2200      	movs	r2, #0
 8000676:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000678:	4b1e      	ldr	r3, [pc, #120]	@ (80006f4 <MX_ETH_Init+0x8c>)
 800067a:	2280      	movs	r2, #128	@ 0x80
 800067c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800067e:	4b1d      	ldr	r3, [pc, #116]	@ (80006f4 <MX_ETH_Init+0x8c>)
 8000680:	22e1      	movs	r2, #225	@ 0xe1
 8000682:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000684:	4b1b      	ldr	r3, [pc, #108]	@ (80006f4 <MX_ETH_Init+0x8c>)
 8000686:	2200      	movs	r2, #0
 8000688:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800068a:	4b1a      	ldr	r3, [pc, #104]	@ (80006f4 <MX_ETH_Init+0x8c>)
 800068c:	2200      	movs	r2, #0
 800068e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000690:	4b18      	ldr	r3, [pc, #96]	@ (80006f4 <MX_ETH_Init+0x8c>)
 8000692:	2200      	movs	r2, #0
 8000694:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000696:	4b15      	ldr	r3, [pc, #84]	@ (80006ec <MX_ETH_Init+0x84>)
 8000698:	4a16      	ldr	r2, [pc, #88]	@ (80006f4 <MX_ETH_Init+0x8c>)
 800069a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800069c:	4b13      	ldr	r3, [pc, #76]	@ (80006ec <MX_ETH_Init+0x84>)
 800069e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80006a2:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80006a4:	4b11      	ldr	r3, [pc, #68]	@ (80006ec <MX_ETH_Init+0x84>)
 80006a6:	4a14      	ldr	r2, [pc, #80]	@ (80006f8 <MX_ETH_Init+0x90>)
 80006a8:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80006aa:	4b10      	ldr	r3, [pc, #64]	@ (80006ec <MX_ETH_Init+0x84>)
 80006ac:	4a13      	ldr	r2, [pc, #76]	@ (80006fc <MX_ETH_Init+0x94>)
 80006ae:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80006b0:	4b0e      	ldr	r3, [pc, #56]	@ (80006ec <MX_ETH_Init+0x84>)
 80006b2:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80006b6:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80006b8:	480c      	ldr	r0, [pc, #48]	@ (80006ec <MX_ETH_Init+0x84>)
 80006ba:	f000 fcb1 	bl	8001020 <HAL_ETH_Init>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80006c4:	f000 f91e 	bl	8000904 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80006c8:	2238      	movs	r2, #56	@ 0x38
 80006ca:	2100      	movs	r1, #0
 80006cc:	480c      	ldr	r0, [pc, #48]	@ (8000700 <MX_ETH_Init+0x98>)
 80006ce:	f003 fc15 	bl	8003efc <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80006d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000700 <MX_ETH_Init+0x98>)
 80006d4:	2221      	movs	r2, #33	@ 0x21
 80006d6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80006d8:	4b09      	ldr	r3, [pc, #36]	@ (8000700 <MX_ETH_Init+0x98>)
 80006da:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80006de:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80006e0:	4b07      	ldr	r3, [pc, #28]	@ (8000700 <MX_ETH_Init+0x98>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80006e6:	bf00      	nop
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	200001a0 	.word	0x200001a0
 80006f0:	40028000 	.word	0x40028000
 80006f4:	200007b8 	.word	0x200007b8
 80006f8:	200000ac 	.word	0x200000ac
 80006fc:	2000000c 	.word	0x2000000c
 8000700:	20000168 	.word	0x20000168

08000704 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000708:	4b14      	ldr	r3, [pc, #80]	@ (800075c <MX_USART3_UART_Init+0x58>)
 800070a:	4a15      	ldr	r2, [pc, #84]	@ (8000760 <MX_USART3_UART_Init+0x5c>)
 800070c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800070e:	4b13      	ldr	r3, [pc, #76]	@ (800075c <MX_USART3_UART_Init+0x58>)
 8000710:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000714:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000716:	4b11      	ldr	r3, [pc, #68]	@ (800075c <MX_USART3_UART_Init+0x58>)
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800071c:	4b0f      	ldr	r3, [pc, #60]	@ (800075c <MX_USART3_UART_Init+0x58>)
 800071e:	2200      	movs	r2, #0
 8000720:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000722:	4b0e      	ldr	r3, [pc, #56]	@ (800075c <MX_USART3_UART_Init+0x58>)
 8000724:	2200      	movs	r2, #0
 8000726:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000728:	4b0c      	ldr	r3, [pc, #48]	@ (800075c <MX_USART3_UART_Init+0x58>)
 800072a:	220c      	movs	r2, #12
 800072c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072e:	4b0b      	ldr	r3, [pc, #44]	@ (800075c <MX_USART3_UART_Init+0x58>)
 8000730:	2200      	movs	r2, #0
 8000732:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000734:	4b09      	ldr	r3, [pc, #36]	@ (800075c <MX_USART3_UART_Init+0x58>)
 8000736:	2200      	movs	r2, #0
 8000738:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800073a:	4b08      	ldr	r3, [pc, #32]	@ (800075c <MX_USART3_UART_Init+0x58>)
 800073c:	2200      	movs	r2, #0
 800073e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000740:	4b06      	ldr	r3, [pc, #24]	@ (800075c <MX_USART3_UART_Init+0x58>)
 8000742:	2200      	movs	r2, #0
 8000744:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000746:	4805      	ldr	r0, [pc, #20]	@ (800075c <MX_USART3_UART_Init+0x58>)
 8000748:	f002 fc14 	bl	8002f74 <HAL_UART_Init>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000752:	f000 f8d7 	bl	8000904 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	20000250 	.word	0x20000250
 8000760:	40004800 	.word	0x40004800

08000764 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000768:	4b14      	ldr	r3, [pc, #80]	@ (80007bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800076a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800076e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000770:	4b12      	ldr	r3, [pc, #72]	@ (80007bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000772:	2206      	movs	r2, #6
 8000774:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000776:	4b11      	ldr	r3, [pc, #68]	@ (80007bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000778:	2202      	movs	r2, #2
 800077a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800077c:	4b0f      	ldr	r3, [pc, #60]	@ (80007bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800077e:	2200      	movs	r2, #0
 8000780:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000782:	4b0e      	ldr	r3, [pc, #56]	@ (80007bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000784:	2202      	movs	r2, #2
 8000786:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000788:	4b0c      	ldr	r3, [pc, #48]	@ (80007bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800078a:	2201      	movs	r2, #1
 800078c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800078e:	4b0b      	ldr	r3, [pc, #44]	@ (80007bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000790:	2200      	movs	r2, #0
 8000792:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000794:	4b09      	ldr	r3, [pc, #36]	@ (80007bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000796:	2200      	movs	r2, #0
 8000798:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800079a:	4b08      	ldr	r3, [pc, #32]	@ (80007bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800079c:	2201      	movs	r2, #1
 800079e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80007a0:	4b06      	ldr	r3, [pc, #24]	@ (80007bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80007a6:	4805      	ldr	r0, [pc, #20]	@ (80007bc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007a8:	f001 f94d 	bl	8001a46 <HAL_PCD_Init>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80007b2:	f000 f8a7 	bl	8000904 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	200002d8 	.word	0x200002d8

080007c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b08c      	sub	sp, #48	@ 0x30
 80007c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c6:	f107 031c 	add.w	r3, r7, #28
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
 80007ce:	605a      	str	r2, [r3, #4]
 80007d0:	609a      	str	r2, [r3, #8]
 80007d2:	60da      	str	r2, [r3, #12]
 80007d4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007d6:	4b47      	ldr	r3, [pc, #284]	@ (80008f4 <MX_GPIO_Init+0x134>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007da:	4a46      	ldr	r2, [pc, #280]	@ (80008f4 <MX_GPIO_Init+0x134>)
 80007dc:	f043 0304 	orr.w	r3, r3, #4
 80007e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007e2:	4b44      	ldr	r3, [pc, #272]	@ (80008f4 <MX_GPIO_Init+0x134>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	f003 0304 	and.w	r3, r3, #4
 80007ea:	61bb      	str	r3, [r7, #24]
 80007ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ee:	4b41      	ldr	r3, [pc, #260]	@ (80008f4 <MX_GPIO_Init+0x134>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	4a40      	ldr	r2, [pc, #256]	@ (80008f4 <MX_GPIO_Init+0x134>)
 80007f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fa:	4b3e      	ldr	r3, [pc, #248]	@ (80008f4 <MX_GPIO_Init+0x134>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000802:	617b      	str	r3, [r7, #20]
 8000804:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000806:	4b3b      	ldr	r3, [pc, #236]	@ (80008f4 <MX_GPIO_Init+0x134>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	4a3a      	ldr	r2, [pc, #232]	@ (80008f4 <MX_GPIO_Init+0x134>)
 800080c:	f043 0301 	orr.w	r3, r3, #1
 8000810:	6313      	str	r3, [r2, #48]	@ 0x30
 8000812:	4b38      	ldr	r3, [pc, #224]	@ (80008f4 <MX_GPIO_Init+0x134>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	f003 0301 	and.w	r3, r3, #1
 800081a:	613b      	str	r3, [r7, #16]
 800081c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800081e:	4b35      	ldr	r3, [pc, #212]	@ (80008f4 <MX_GPIO_Init+0x134>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000822:	4a34      	ldr	r2, [pc, #208]	@ (80008f4 <MX_GPIO_Init+0x134>)
 8000824:	f043 0302 	orr.w	r3, r3, #2
 8000828:	6313      	str	r3, [r2, #48]	@ 0x30
 800082a:	4b32      	ldr	r3, [pc, #200]	@ (80008f4 <MX_GPIO_Init+0x134>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082e:	f003 0302 	and.w	r3, r3, #2
 8000832:	60fb      	str	r3, [r7, #12]
 8000834:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000836:	4b2f      	ldr	r3, [pc, #188]	@ (80008f4 <MX_GPIO_Init+0x134>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	4a2e      	ldr	r2, [pc, #184]	@ (80008f4 <MX_GPIO_Init+0x134>)
 800083c:	f043 0308 	orr.w	r3, r3, #8
 8000840:	6313      	str	r3, [r2, #48]	@ 0x30
 8000842:	4b2c      	ldr	r3, [pc, #176]	@ (80008f4 <MX_GPIO_Init+0x134>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000846:	f003 0308 	and.w	r3, r3, #8
 800084a:	60bb      	str	r3, [r7, #8]
 800084c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800084e:	4b29      	ldr	r3, [pc, #164]	@ (80008f4 <MX_GPIO_Init+0x134>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000852:	4a28      	ldr	r2, [pc, #160]	@ (80008f4 <MX_GPIO_Init+0x134>)
 8000854:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000858:	6313      	str	r3, [r2, #48]	@ 0x30
 800085a:	4b26      	ldr	r3, [pc, #152]	@ (80008f4 <MX_GPIO_Init+0x134>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000866:	2200      	movs	r2, #0
 8000868:	f244 0181 	movw	r1, #16513	@ 0x4081
 800086c:	4822      	ldr	r0, [pc, #136]	@ (80008f8 <MX_GPIO_Init+0x138>)
 800086e:	f001 f8d1 	bl	8001a14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	2140      	movs	r1, #64	@ 0x40
 8000876:	4821      	ldr	r0, [pc, #132]	@ (80008fc <MX_GPIO_Init+0x13c>)
 8000878:	f001 f8cc 	bl	8001a14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800087c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000880:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000882:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000886:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800088c:	f107 031c 	add.w	r3, r7, #28
 8000890:	4619      	mov	r1, r3
 8000892:	481b      	ldr	r0, [pc, #108]	@ (8000900 <MX_GPIO_Init+0x140>)
 8000894:	f000 ff12 	bl	80016bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000898:	f244 0381 	movw	r3, #16513	@ 0x4081
 800089c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089e:	2301      	movs	r3, #1
 80008a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a6:	2300      	movs	r3, #0
 80008a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008aa:	f107 031c 	add.w	r3, r7, #28
 80008ae:	4619      	mov	r1, r3
 80008b0:	4811      	ldr	r0, [pc, #68]	@ (80008f8 <MX_GPIO_Init+0x138>)
 80008b2:	f000 ff03 	bl	80016bc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008b6:	2340      	movs	r3, #64	@ 0x40
 80008b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ba:	2301      	movs	r3, #1
 80008bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c2:	2300      	movs	r3, #0
 80008c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008c6:	f107 031c 	add.w	r3, r7, #28
 80008ca:	4619      	mov	r1, r3
 80008cc:	480b      	ldr	r0, [pc, #44]	@ (80008fc <MX_GPIO_Init+0x13c>)
 80008ce:	f000 fef5 	bl	80016bc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008d2:	2380      	movs	r3, #128	@ 0x80
 80008d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d6:	2300      	movs	r3, #0
 80008d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008de:	f107 031c 	add.w	r3, r7, #28
 80008e2:	4619      	mov	r1, r3
 80008e4:	4805      	ldr	r0, [pc, #20]	@ (80008fc <MX_GPIO_Init+0x13c>)
 80008e6:	f000 fee9 	bl	80016bc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80008ea:	bf00      	nop
 80008ec:	3730      	adds	r7, #48	@ 0x30
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	40023800 	.word	0x40023800
 80008f8:	40020400 	.word	0x40020400
 80008fc:	40021800 	.word	0x40021800
 8000900:	40020800 	.word	0x40020800

08000904 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000908:	b672      	cpsid	i
}
 800090a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800090c:	bf00      	nop
 800090e:	e7fd      	b.n	800090c <Error_Handler+0x8>

08000910 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000910:	b480      	push	{r7}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000916:	4b0f      	ldr	r3, [pc, #60]	@ (8000954 <HAL_MspInit+0x44>)
 8000918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800091a:	4a0e      	ldr	r2, [pc, #56]	@ (8000954 <HAL_MspInit+0x44>)
 800091c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000920:	6413      	str	r3, [r2, #64]	@ 0x40
 8000922:	4b0c      	ldr	r3, [pc, #48]	@ (8000954 <HAL_MspInit+0x44>)
 8000924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000926:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800092e:	4b09      	ldr	r3, [pc, #36]	@ (8000954 <HAL_MspInit+0x44>)
 8000930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000932:	4a08      	ldr	r2, [pc, #32]	@ (8000954 <HAL_MspInit+0x44>)
 8000934:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000938:	6453      	str	r3, [r2, #68]	@ 0x44
 800093a:	4b06      	ldr	r3, [pc, #24]	@ (8000954 <HAL_MspInit+0x44>)
 800093c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800093e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000942:	603b      	str	r3, [r7, #0]
 8000944:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000946:	bf00      	nop
 8000948:	370c      	adds	r7, #12
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	40023800 	.word	0x40023800

08000958 <HAL_ETH_MspInit>:
  * This function configures the hardware resources used in this example
  * @param heth: ETH handle pointer
  * @retval None
  */
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b08e      	sub	sp, #56	@ 0x38
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000960:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
 8000968:	605a      	str	r2, [r3, #4]
 800096a:	609a      	str	r2, [r3, #8]
 800096c:	60da      	str	r2, [r3, #12]
 800096e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a4e      	ldr	r2, [pc, #312]	@ (8000ab0 <HAL_ETH_MspInit+0x158>)
 8000976:	4293      	cmp	r3, r2
 8000978:	f040 8096 	bne.w	8000aa8 <HAL_ETH_MspInit+0x150>
  {
    /* USER CODE BEGIN ETH_MspInit 0 */

    /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 800097c:	4b4d      	ldr	r3, [pc, #308]	@ (8000ab4 <HAL_ETH_MspInit+0x15c>)
 800097e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000980:	4a4c      	ldr	r2, [pc, #304]	@ (8000ab4 <HAL_ETH_MspInit+0x15c>)
 8000982:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000986:	6313      	str	r3, [r2, #48]	@ 0x30
 8000988:	4b4a      	ldr	r3, [pc, #296]	@ (8000ab4 <HAL_ETH_MspInit+0x15c>)
 800098a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000990:	623b      	str	r3, [r7, #32]
 8000992:	6a3b      	ldr	r3, [r7, #32]
 8000994:	4b47      	ldr	r3, [pc, #284]	@ (8000ab4 <HAL_ETH_MspInit+0x15c>)
 8000996:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000998:	4a46      	ldr	r2, [pc, #280]	@ (8000ab4 <HAL_ETH_MspInit+0x15c>)
 800099a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800099e:	6313      	str	r3, [r2, #48]	@ 0x30
 80009a0:	4b44      	ldr	r3, [pc, #272]	@ (8000ab4 <HAL_ETH_MspInit+0x15c>)
 80009a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80009a8:	61fb      	str	r3, [r7, #28]
 80009aa:	69fb      	ldr	r3, [r7, #28]
 80009ac:	4b41      	ldr	r3, [pc, #260]	@ (8000ab4 <HAL_ETH_MspInit+0x15c>)
 80009ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b0:	4a40      	ldr	r2, [pc, #256]	@ (8000ab4 <HAL_ETH_MspInit+0x15c>)
 80009b2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80009b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80009b8:	4b3e      	ldr	r3, [pc, #248]	@ (8000ab4 <HAL_ETH_MspInit+0x15c>)
 80009ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80009c0:	61bb      	str	r3, [r7, #24]
 80009c2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009c4:	4b3b      	ldr	r3, [pc, #236]	@ (8000ab4 <HAL_ETH_MspInit+0x15c>)
 80009c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c8:	4a3a      	ldr	r2, [pc, #232]	@ (8000ab4 <HAL_ETH_MspInit+0x15c>)
 80009ca:	f043 0304 	orr.w	r3, r3, #4
 80009ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80009d0:	4b38      	ldr	r3, [pc, #224]	@ (8000ab4 <HAL_ETH_MspInit+0x15c>)
 80009d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d4:	f003 0304 	and.w	r3, r3, #4
 80009d8:	617b      	str	r3, [r7, #20]
 80009da:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009dc:	4b35      	ldr	r3, [pc, #212]	@ (8000ab4 <HAL_ETH_MspInit+0x15c>)
 80009de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e0:	4a34      	ldr	r2, [pc, #208]	@ (8000ab4 <HAL_ETH_MspInit+0x15c>)
 80009e2:	f043 0301 	orr.w	r3, r3, #1
 80009e6:	6313      	str	r3, [r2, #48]	@ 0x30
 80009e8:	4b32      	ldr	r3, [pc, #200]	@ (8000ab4 <HAL_ETH_MspInit+0x15c>)
 80009ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ec:	f003 0301 	and.w	r3, r3, #1
 80009f0:	613b      	str	r3, [r7, #16]
 80009f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f4:	4b2f      	ldr	r3, [pc, #188]	@ (8000ab4 <HAL_ETH_MspInit+0x15c>)
 80009f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f8:	4a2e      	ldr	r2, [pc, #184]	@ (8000ab4 <HAL_ETH_MspInit+0x15c>)
 80009fa:	f043 0302 	orr.w	r3, r3, #2
 80009fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a00:	4b2c      	ldr	r3, [pc, #176]	@ (8000ab4 <HAL_ETH_MspInit+0x15c>)
 8000a02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a04:	f003 0302 	and.w	r3, r3, #2
 8000a08:	60fb      	str	r3, [r7, #12]
 8000a0a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a0c:	4b29      	ldr	r3, [pc, #164]	@ (8000ab4 <HAL_ETH_MspInit+0x15c>)
 8000a0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a10:	4a28      	ldr	r2, [pc, #160]	@ (8000ab4 <HAL_ETH_MspInit+0x15c>)
 8000a12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a16:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a18:	4b26      	ldr	r3, [pc, #152]	@ (8000ab4 <HAL_ETH_MspInit+0x15c>)
 8000a1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a20:	60bb      	str	r3, [r7, #8]
 8000a22:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000a24:	2332      	movs	r3, #50	@ 0x32
 8000a26:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a30:	2303      	movs	r3, #3
 8000a32:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a34:	230b      	movs	r3, #11
 8000a36:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a38:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	481e      	ldr	r0, [pc, #120]	@ (8000ab8 <HAL_ETH_MspInit+0x160>)
 8000a40:	f000 fe3c 	bl	80016bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000a44:	2386      	movs	r3, #134	@ 0x86
 8000a46:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a48:	2302      	movs	r3, #2
 8000a4a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a50:	2303      	movs	r3, #3
 8000a52:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a54:	230b      	movs	r3, #11
 8000a56:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4817      	ldr	r0, [pc, #92]	@ (8000abc <HAL_ETH_MspInit+0x164>)
 8000a60:	f000 fe2c 	bl	80016bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000a64:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a68:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a72:	2303      	movs	r3, #3
 8000a74:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a76:	230b      	movs	r3, #11
 8000a78:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000a7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a7e:	4619      	mov	r1, r3
 8000a80:	480f      	ldr	r0, [pc, #60]	@ (8000ac0 <HAL_ETH_MspInit+0x168>)
 8000a82:	f000 fe1b 	bl	80016bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000a86:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000a8a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a94:	2303      	movs	r3, #3
 8000a96:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a98:	230b      	movs	r3, #11
 8000a9a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4808      	ldr	r0, [pc, #32]	@ (8000ac4 <HAL_ETH_MspInit+0x16c>)
 8000aa4:	f000 fe0a 	bl	80016bc <HAL_GPIO_Init>

    /* USER CODE END ETH_MspInit 1 */

  }

}
 8000aa8:	bf00      	nop
 8000aaa:	3738      	adds	r7, #56	@ 0x38
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	40028000 	.word	0x40028000
 8000ab4:	40023800 	.word	0x40023800
 8000ab8:	40020800 	.word	0x40020800
 8000abc:	40020000 	.word	0x40020000
 8000ac0:	40020400 	.word	0x40020400
 8000ac4:	40021800 	.word	0x40021800

08000ac8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b0ae      	sub	sp, #184	@ 0xb8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	605a      	str	r2, [r3, #4]
 8000ada:	609a      	str	r2, [r3, #8]
 8000adc:	60da      	str	r2, [r3, #12]
 8000ade:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ae0:	f107 0314 	add.w	r3, r7, #20
 8000ae4:	2290      	movs	r2, #144	@ 0x90
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f003 fa07 	bl	8003efc <memset>
  if(huart->Instance==USART3)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4a22      	ldr	r2, [pc, #136]	@ (8000b7c <HAL_UART_MspInit+0xb4>)
 8000af4:	4293      	cmp	r3, r2
 8000af6:	d13c      	bne.n	8000b72 <HAL_UART_MspInit+0xaa>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000af8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000afc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000afe:	2300      	movs	r3, #0
 8000b00:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b02:	f107 0314 	add.w	r3, r7, #20
 8000b06:	4618      	mov	r0, r3
 8000b08:	f001 fe0c 	bl	8002724 <HAL_RCCEx_PeriphCLKConfig>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000b12:	f7ff fef7 	bl	8000904 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b16:	4b1a      	ldr	r3, [pc, #104]	@ (8000b80 <HAL_UART_MspInit+0xb8>)
 8000b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b1a:	4a19      	ldr	r2, [pc, #100]	@ (8000b80 <HAL_UART_MspInit+0xb8>)
 8000b1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000b20:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b22:	4b17      	ldr	r3, [pc, #92]	@ (8000b80 <HAL_UART_MspInit+0xb8>)
 8000b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b26:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000b2a:	613b      	str	r3, [r7, #16]
 8000b2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b2e:	4b14      	ldr	r3, [pc, #80]	@ (8000b80 <HAL_UART_MspInit+0xb8>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b32:	4a13      	ldr	r2, [pc, #76]	@ (8000b80 <HAL_UART_MspInit+0xb8>)
 8000b34:	f043 0308 	orr.w	r3, r3, #8
 8000b38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b3a:	4b11      	ldr	r3, [pc, #68]	@ (8000b80 <HAL_UART_MspInit+0xb8>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3e:	f003 0308 	and.w	r3, r3, #8
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000b46:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000b4a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b5a:	2303      	movs	r3, #3
 8000b5c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b60:	2307      	movs	r3, #7
 8000b62:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b66:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4805      	ldr	r0, [pc, #20]	@ (8000b84 <HAL_UART_MspInit+0xbc>)
 8000b6e:	f000 fda5 	bl	80016bc <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8000b72:	bf00      	nop
 8000b74:	37b8      	adds	r7, #184	@ 0xb8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	40004800 	.word	0x40004800
 8000b80:	40023800 	.word	0x40023800
 8000b84:	40020c00 	.word	0x40020c00

08000b88 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b0ae      	sub	sp, #184	@ 0xb8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b90:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
 8000b9c:	60da      	str	r2, [r3, #12]
 8000b9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ba0:	f107 0314 	add.w	r3, r7, #20
 8000ba4:	2290      	movs	r2, #144	@ 0x90
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f003 f9a7 	bl	8003efc <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000bb6:	d159      	bne.n	8000c6c <HAL_PCD_MspInit+0xe4>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000bb8:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000bbc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bc4:	f107 0314 	add.w	r3, r7, #20
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f001 fdab 	bl	8002724 <HAL_RCCEx_PeriphCLKConfig>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000bd4:	f7ff fe96 	bl	8000904 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd8:	4b26      	ldr	r3, [pc, #152]	@ (8000c74 <HAL_PCD_MspInit+0xec>)
 8000bda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bdc:	4a25      	ldr	r2, [pc, #148]	@ (8000c74 <HAL_PCD_MspInit+0xec>)
 8000bde:	f043 0301 	orr.w	r3, r3, #1
 8000be2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000be4:	4b23      	ldr	r3, [pc, #140]	@ (8000c74 <HAL_PCD_MspInit+0xec>)
 8000be6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be8:	f003 0301 	and.w	r3, r3, #1
 8000bec:	613b      	str	r3, [r7, #16]
 8000bee:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000bf0:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000bf4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c04:	2303      	movs	r3, #3
 8000c06:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c0a:	230a      	movs	r3, #10
 8000c0c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c10:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000c14:	4619      	mov	r1, r3
 8000c16:	4818      	ldr	r0, [pc, #96]	@ (8000c78 <HAL_PCD_MspInit+0xf0>)
 8000c18:	f000 fd50 	bl	80016bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000c1c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c20:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c24:	2300      	movs	r3, #0
 8000c26:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000c30:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000c34:	4619      	mov	r1, r3
 8000c36:	4810      	ldr	r0, [pc, #64]	@ (8000c78 <HAL_PCD_MspInit+0xf0>)
 8000c38:	f000 fd40 	bl	80016bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000c3c:	4b0d      	ldr	r3, [pc, #52]	@ (8000c74 <HAL_PCD_MspInit+0xec>)
 8000c3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c40:	4a0c      	ldr	r2, [pc, #48]	@ (8000c74 <HAL_PCD_MspInit+0xec>)
 8000c42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c46:	6353      	str	r3, [r2, #52]	@ 0x34
 8000c48:	4b0a      	ldr	r3, [pc, #40]	@ (8000c74 <HAL_PCD_MspInit+0xec>)
 8000c4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	4b07      	ldr	r3, [pc, #28]	@ (8000c74 <HAL_PCD_MspInit+0xec>)
 8000c56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c58:	4a06      	ldr	r2, [pc, #24]	@ (8000c74 <HAL_PCD_MspInit+0xec>)
 8000c5a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c5e:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c60:	4b04      	ldr	r3, [pc, #16]	@ (8000c74 <HAL_PCD_MspInit+0xec>)
 8000c62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c64:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c68:	60bb      	str	r3, [r7, #8]
 8000c6a:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8000c6c:	bf00      	nop
 8000c6e:	37b8      	adds	r7, #184	@ 0xb8
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	40023800 	.word	0x40023800
 8000c78:	40020000 	.word	0x40020000

08000c7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c80:	bf00      	nop
 8000c82:	e7fd      	b.n	8000c80 <NMI_Handler+0x4>

08000c84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c88:	bf00      	nop
 8000c8a:	e7fd      	b.n	8000c88 <HardFault_Handler+0x4>

08000c8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c90:	bf00      	nop
 8000c92:	e7fd      	b.n	8000c90 <MemManage_Handler+0x4>

08000c94 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c98:	bf00      	nop
 8000c9a:	e7fd      	b.n	8000c98 <BusFault_Handler+0x4>

08000c9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca0:	bf00      	nop
 8000ca2:	e7fd      	b.n	8000ca0 <UsageFault_Handler+0x4>

08000ca4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ca8:	bf00      	nop
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr

08000cb2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr

08000cc0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cc4:	bf00      	nop
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr

08000cce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cd2:	f000 f87b 	bl	8000dcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
	...

08000cdc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ce0:	4b06      	ldr	r3, [pc, #24]	@ (8000cfc <SystemInit+0x20>)
 8000ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ce6:	4a05      	ldr	r2, [pc, #20]	@ (8000cfc <SystemInit+0x20>)
 8000ce8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	e000ed00 	.word	0xe000ed00

08000d00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d00:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d38 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d04:	f7ff ffea 	bl	8000cdc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d08:	480c      	ldr	r0, [pc, #48]	@ (8000d3c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d0a:	490d      	ldr	r1, [pc, #52]	@ (8000d40 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d0c:	4a0d      	ldr	r2, [pc, #52]	@ (8000d44 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d10:	e002      	b.n	8000d18 <LoopCopyDataInit>

08000d12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d16:	3304      	adds	r3, #4

08000d18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d1c:	d3f9      	bcc.n	8000d12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d1e:	4a0a      	ldr	r2, [pc, #40]	@ (8000d48 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d20:	4c0a      	ldr	r4, [pc, #40]	@ (8000d4c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d24:	e001      	b.n	8000d2a <LoopFillZerobss>

08000d26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d28:	3204      	adds	r2, #4

08000d2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d2c:	d3fb      	bcc.n	8000d26 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000d2e:	f003 f8ed 	bl	8003f0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d32:	f7ff fc17 	bl	8000564 <main>
  bx  lr    
 8000d36:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d38:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000d3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d40:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d44:	08003f94 	.word	0x08003f94
  ldr r2, =_sbss
 8000d48:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 8000d4c:	200007c4 	.word	0x200007c4

08000d50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d50:	e7fe      	b.n	8000d50 <ADC_IRQHandler>

08000d52 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d52:	b580      	push	{r7, lr}
 8000d54:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d56:	2003      	movs	r0, #3
 8000d58:	f000 f92e 	bl	8000fb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d5c:	2000      	movs	r0, #0
 8000d5e:	f000 f805 	bl	8000d6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d62:	f7ff fdd5 	bl	8000910 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d66:	2300      	movs	r3, #0
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d74:	4b12      	ldr	r3, [pc, #72]	@ (8000dc0 <HAL_InitTick+0x54>)
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	4b12      	ldr	r3, [pc, #72]	@ (8000dc4 <HAL_InitTick+0x58>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f000 f93b 	bl	8001006 <HAL_SYSTICK_Config>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d96:	2301      	movs	r3, #1
 8000d98:	e00e      	b.n	8000db8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2b0f      	cmp	r3, #15
 8000d9e:	d80a      	bhi.n	8000db6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000da0:	2200      	movs	r2, #0
 8000da2:	6879      	ldr	r1, [r7, #4]
 8000da4:	f04f 30ff 	mov.w	r0, #4294967295
 8000da8:	f000 f911 	bl	8000fce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dac:	4a06      	ldr	r2, [pc, #24]	@ (8000dc8 <HAL_InitTick+0x5c>)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000db2:	2300      	movs	r3, #0
 8000db4:	e000      	b.n	8000db8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	3708      	adds	r7, #8
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	20000000 	.word	0x20000000
 8000dc4:	20000008 	.word	0x20000008
 8000dc8:	20000004 	.word	0x20000004

08000dcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dd0:	4b06      	ldr	r3, [pc, #24]	@ (8000dec <HAL_IncTick+0x20>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	4b06      	ldr	r3, [pc, #24]	@ (8000df0 <HAL_IncTick+0x24>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4413      	add	r3, r2
 8000ddc:	4a04      	ldr	r2, [pc, #16]	@ (8000df0 <HAL_IncTick+0x24>)
 8000dde:	6013      	str	r3, [r2, #0]
}
 8000de0:	bf00      	nop
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	20000008 	.word	0x20000008
 8000df0:	200007c0 	.word	0x200007c0

08000df4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  return uwTick;
 8000df8:	4b03      	ldr	r3, [pc, #12]	@ (8000e08 <HAL_GetTick+0x14>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	200007c0 	.word	0x200007c0

08000e0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e14:	f7ff ffee 	bl	8000df4 <HAL_GetTick>
 8000e18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e24:	d005      	beq.n	8000e32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e26:	4b0a      	ldr	r3, [pc, #40]	@ (8000e50 <HAL_Delay+0x44>)
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	4413      	add	r3, r2
 8000e30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e32:	bf00      	nop
 8000e34:	f7ff ffde 	bl	8000df4 <HAL_GetTick>
 8000e38:	4602      	mov	r2, r0
 8000e3a:	68bb      	ldr	r3, [r7, #8]
 8000e3c:	1ad3      	subs	r3, r2, r3
 8000e3e:	68fa      	ldr	r2, [r7, #12]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	d8f7      	bhi.n	8000e34 <HAL_Delay+0x28>
  {
  }
}
 8000e44:	bf00      	nop
 8000e46:	bf00      	nop
 8000e48:	3710      	adds	r7, #16
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	20000008 	.word	0x20000008

08000e54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b085      	sub	sp, #20
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	f003 0307 	and.w	r3, r3, #7
 8000e62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e64:	4b0b      	ldr	r3, [pc, #44]	@ (8000e94 <__NVIC_SetPriorityGrouping+0x40>)
 8000e66:	68db      	ldr	r3, [r3, #12]
 8000e68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e6a:	68ba      	ldr	r2, [r7, #8]
 8000e6c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e70:	4013      	ands	r3, r2
 8000e72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000e7c:	4b06      	ldr	r3, [pc, #24]	@ (8000e98 <__NVIC_SetPriorityGrouping+0x44>)
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e82:	4a04      	ldr	r2, [pc, #16]	@ (8000e94 <__NVIC_SetPriorityGrouping+0x40>)
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	60d3      	str	r3, [r2, #12]
}
 8000e88:	bf00      	nop
 8000e8a:	3714      	adds	r7, #20
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	e000ed00 	.word	0xe000ed00
 8000e98:	05fa0000 	.word	0x05fa0000

08000e9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ea0:	4b04      	ldr	r3, [pc, #16]	@ (8000eb4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ea2:	68db      	ldr	r3, [r3, #12]
 8000ea4:	0a1b      	lsrs	r3, r3, #8
 8000ea6:	f003 0307 	and.w	r3, r3, #7
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	e000ed00 	.word	0xe000ed00

08000eb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	6039      	str	r1, [r7, #0]
 8000ec2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ec4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	db0a      	blt.n	8000ee2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	b2da      	uxtb	r2, r3
 8000ed0:	490c      	ldr	r1, [pc, #48]	@ (8000f04 <__NVIC_SetPriority+0x4c>)
 8000ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed6:	0112      	lsls	r2, r2, #4
 8000ed8:	b2d2      	uxtb	r2, r2
 8000eda:	440b      	add	r3, r1
 8000edc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ee0:	e00a      	b.n	8000ef8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	b2da      	uxtb	r2, r3
 8000ee6:	4908      	ldr	r1, [pc, #32]	@ (8000f08 <__NVIC_SetPriority+0x50>)
 8000ee8:	79fb      	ldrb	r3, [r7, #7]
 8000eea:	f003 030f 	and.w	r3, r3, #15
 8000eee:	3b04      	subs	r3, #4
 8000ef0:	0112      	lsls	r2, r2, #4
 8000ef2:	b2d2      	uxtb	r2, r2
 8000ef4:	440b      	add	r3, r1
 8000ef6:	761a      	strb	r2, [r3, #24]
}
 8000ef8:	bf00      	nop
 8000efa:	370c      	adds	r7, #12
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr
 8000f04:	e000e100 	.word	0xe000e100
 8000f08:	e000ed00 	.word	0xe000ed00

08000f0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b089      	sub	sp, #36	@ 0x24
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	60f8      	str	r0, [r7, #12]
 8000f14:	60b9      	str	r1, [r7, #8]
 8000f16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	f003 0307 	and.w	r3, r3, #7
 8000f1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	f1c3 0307 	rsb	r3, r3, #7
 8000f26:	2b04      	cmp	r3, #4
 8000f28:	bf28      	it	cs
 8000f2a:	2304      	movcs	r3, #4
 8000f2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	3304      	adds	r3, #4
 8000f32:	2b06      	cmp	r3, #6
 8000f34:	d902      	bls.n	8000f3c <NVIC_EncodePriority+0x30>
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	3b03      	subs	r3, #3
 8000f3a:	e000      	b.n	8000f3e <NVIC_EncodePriority+0x32>
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f40:	f04f 32ff 	mov.w	r2, #4294967295
 8000f44:	69bb      	ldr	r3, [r7, #24]
 8000f46:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4a:	43da      	mvns	r2, r3
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	401a      	ands	r2, r3
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f54:	f04f 31ff 	mov.w	r1, #4294967295
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f5e:	43d9      	mvns	r1, r3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f64:	4313      	orrs	r3, r2
         );
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3724      	adds	r7, #36	@ 0x24
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
	...

08000f74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	3b01      	subs	r3, #1
 8000f80:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f84:	d301      	bcc.n	8000f8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f86:	2301      	movs	r3, #1
 8000f88:	e00f      	b.n	8000faa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f8a:	4a0a      	ldr	r2, [pc, #40]	@ (8000fb4 <SysTick_Config+0x40>)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	3b01      	subs	r3, #1
 8000f90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f92:	210f      	movs	r1, #15
 8000f94:	f04f 30ff 	mov.w	r0, #4294967295
 8000f98:	f7ff ff8e 	bl	8000eb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f9c:	4b05      	ldr	r3, [pc, #20]	@ (8000fb4 <SysTick_Config+0x40>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fa2:	4b04      	ldr	r3, [pc, #16]	@ (8000fb4 <SysTick_Config+0x40>)
 8000fa4:	2207      	movs	r2, #7
 8000fa6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fa8:	2300      	movs	r3, #0
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	e000e010 	.word	0xe000e010

08000fb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f7ff ff47 	bl	8000e54 <__NVIC_SetPriorityGrouping>
}
 8000fc6:	bf00      	nop
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	b086      	sub	sp, #24
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	60b9      	str	r1, [r7, #8]
 8000fd8:	607a      	str	r2, [r7, #4]
 8000fda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fe0:	f7ff ff5c 	bl	8000e9c <__NVIC_GetPriorityGrouping>
 8000fe4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fe6:	687a      	ldr	r2, [r7, #4]
 8000fe8:	68b9      	ldr	r1, [r7, #8]
 8000fea:	6978      	ldr	r0, [r7, #20]
 8000fec:	f7ff ff8e 	bl	8000f0c <NVIC_EncodePriority>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ff6:	4611      	mov	r1, r2
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff ff5d 	bl	8000eb8 <__NVIC_SetPriority>
}
 8000ffe:	bf00      	nop
 8001000:	3718      	adds	r7, #24
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}

08001006 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001006:	b580      	push	{r7, lr}
 8001008:	b082      	sub	sp, #8
 800100a:	af00      	add	r7, sp, #0
 800100c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f7ff ffb0 	bl	8000f74 <SysTick_Config>
 8001014:	4603      	mov	r3, r0
}
 8001016:	4618      	mov	r0, r3
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
	...

08001020 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d101      	bne.n	8001032 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800102e:	2301      	movs	r3, #1
 8001030:	e086      	b.n	8001140 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001038:	2b00      	cmp	r3, #0
 800103a:	d106      	bne.n	800104a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2220      	movs	r2, #32
 8001040:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f7ff fc87 	bl	8000958 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800104a:	4b3f      	ldr	r3, [pc, #252]	@ (8001148 <HAL_ETH_Init+0x128>)
 800104c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800104e:	4a3e      	ldr	r2, [pc, #248]	@ (8001148 <HAL_ETH_Init+0x128>)
 8001050:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001054:	6453      	str	r3, [r2, #68]	@ 0x44
 8001056:	4b3c      	ldr	r3, [pc, #240]	@ (8001148 <HAL_ETH_Init+0x128>)
 8001058:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800105a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800105e:	60bb      	str	r3, [r7, #8]
 8001060:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001062:	4b3a      	ldr	r3, [pc, #232]	@ (800114c <HAL_ETH_Init+0x12c>)
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	4a39      	ldr	r2, [pc, #228]	@ (800114c <HAL_ETH_Init+0x12c>)
 8001068:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800106c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800106e:	4b37      	ldr	r3, [pc, #220]	@ (800114c <HAL_ETH_Init+0x12c>)
 8001070:	685a      	ldr	r2, [r3, #4]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	689b      	ldr	r3, [r3, #8]
 8001076:	4935      	ldr	r1, [pc, #212]	@ (800114c <HAL_ETH_Init+0x12c>)
 8001078:	4313      	orrs	r3, r2
 800107a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800107c:	4b33      	ldr	r3, [pc, #204]	@ (800114c <HAL_ETH_Init+0x12c>)
 800107e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	687a      	ldr	r2, [r7, #4]
 800108c:	6812      	ldr	r2, [r2, #0]
 800108e:	f043 0301 	orr.w	r3, r3, #1
 8001092:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001096:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001098:	f7ff feac 	bl	8000df4 <HAL_GetTick>
 800109c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800109e:	e011      	b.n	80010c4 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80010a0:	f7ff fea8 	bl	8000df4 <HAL_GetTick>
 80010a4:	4602      	mov	r2, r0
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80010ae:	d909      	bls.n	80010c4 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2204      	movs	r2, #4
 80010b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	22e0      	movs	r2, #224	@ 0xe0
 80010bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80010c0:	2301      	movs	r3, #1
 80010c2:	e03d      	b.n	8001140 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d1e4      	bne.n	80010a0 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	f000 f97a 	bl	80013d0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f000 fa25 	bl	800152c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	f000 fa7b 	bl	80015de <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	461a      	mov	r2, r3
 80010ee:	2100      	movs	r1, #0
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f000 f9e3 	bl	80014bc <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8001104:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	4b0f      	ldr	r3, [pc, #60]	@ (8001150 <HAL_ETH_Init+0x130>)
 8001114:	430b      	orrs	r3, r1
 8001116:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 800112a:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2200      	movs	r2, #0
 8001132:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2210      	movs	r2, #16
 800113a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800113e:	2300      	movs	r3, #0
}
 8001140:	4618      	mov	r0, r3
 8001142:	3710      	adds	r7, #16
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	40023800 	.word	0x40023800
 800114c:	40013800 	.word	0x40013800
 8001150:	00020060 	.word	0x00020060

08001154 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001166:	68fa      	ldr	r2, [r7, #12]
 8001168:	4b53      	ldr	r3, [pc, #332]	@ (80012b8 <ETH_SetMACConfig+0x164>)
 800116a:	4013      	ands	r3, r2
 800116c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	7b9b      	ldrb	r3, [r3, #14]
 8001172:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001174:	683a      	ldr	r2, [r7, #0]
 8001176:	7c12      	ldrb	r2, [r2, #16]
 8001178:	2a00      	cmp	r2, #0
 800117a:	d102      	bne.n	8001182 <ETH_SetMACConfig+0x2e>
 800117c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001180:	e000      	b.n	8001184 <ETH_SetMACConfig+0x30>
 8001182:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001184:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001186:	683a      	ldr	r2, [r7, #0]
 8001188:	7c52      	ldrb	r2, [r2, #17]
 800118a:	2a00      	cmp	r2, #0
 800118c:	d102      	bne.n	8001194 <ETH_SetMACConfig+0x40>
 800118e:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001192:	e000      	b.n	8001196 <ETH_SetMACConfig+0x42>
 8001194:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001196:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800119c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	7fdb      	ldrb	r3, [r3, #31]
 80011a2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80011a4:	431a      	orrs	r2, r3
                        macconf->Speed |
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80011aa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80011ac:	683a      	ldr	r2, [r7, #0]
 80011ae:	7f92      	ldrb	r2, [r2, #30]
 80011b0:	2a00      	cmp	r2, #0
 80011b2:	d102      	bne.n	80011ba <ETH_SetMACConfig+0x66>
 80011b4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80011b8:	e000      	b.n	80011bc <ETH_SetMACConfig+0x68>
 80011ba:	2200      	movs	r2, #0
                        macconf->Speed |
 80011bc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	7f1b      	ldrb	r3, [r3, #28]
 80011c2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80011c4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80011ca:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	791b      	ldrb	r3, [r3, #4]
 80011d0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80011d2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80011d4:	683a      	ldr	r2, [r7, #0]
 80011d6:	f892 2020 	ldrb.w	r2, [r2, #32]
 80011da:	2a00      	cmp	r2, #0
 80011dc:	d102      	bne.n	80011e4 <ETH_SetMACConfig+0x90>
 80011de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011e2:	e000      	b.n	80011e6 <ETH_SetMACConfig+0x92>
 80011e4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80011e6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	7bdb      	ldrb	r3, [r3, #15]
 80011ec:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80011ee:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80011f4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80011fc:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80011fe:	4313      	orrs	r3, r2
 8001200:	68fa      	ldr	r2, [r7, #12]
 8001202:	4313      	orrs	r3, r2
 8001204:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	68fa      	ldr	r2, [r7, #12]
 800120c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001216:	2001      	movs	r0, #1
 8001218:	f7ff fdf8 	bl	8000e0c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	68fa      	ldr	r2, [r7, #12]
 8001222:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	699b      	ldr	r3, [r3, #24]
 800122a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800122c:	68fa      	ldr	r2, [r7, #12]
 800122e:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8001232:	4013      	ands	r3, r2
 8001234:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800123a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800123c:	683a      	ldr	r2, [r7, #0]
 800123e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001242:	2a00      	cmp	r2, #0
 8001244:	d101      	bne.n	800124a <ETH_SetMACConfig+0xf6>
 8001246:	2280      	movs	r2, #128	@ 0x80
 8001248:	e000      	b.n	800124c <ETH_SetMACConfig+0xf8>
 800124a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800124c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001252:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001254:	683a      	ldr	r2, [r7, #0]
 8001256:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 800125a:	2a01      	cmp	r2, #1
 800125c:	d101      	bne.n	8001262 <ETH_SetMACConfig+0x10e>
 800125e:	2208      	movs	r2, #8
 8001260:	e000      	b.n	8001264 <ETH_SetMACConfig+0x110>
 8001262:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001264:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001266:	683a      	ldr	r2, [r7, #0]
 8001268:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 800126c:	2a01      	cmp	r2, #1
 800126e:	d101      	bne.n	8001274 <ETH_SetMACConfig+0x120>
 8001270:	2204      	movs	r2, #4
 8001272:	e000      	b.n	8001276 <ETH_SetMACConfig+0x122>
 8001274:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001276:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001278:	683a      	ldr	r2, [r7, #0]
 800127a:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 800127e:	2a01      	cmp	r2, #1
 8001280:	d101      	bne.n	8001286 <ETH_SetMACConfig+0x132>
 8001282:	2202      	movs	r2, #2
 8001284:	e000      	b.n	8001288 <ETH_SetMACConfig+0x134>
 8001286:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001288:	4313      	orrs	r3, r2
 800128a:	68fa      	ldr	r2, [r7, #12]
 800128c:	4313      	orrs	r3, r2
 800128e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	68fa      	ldr	r2, [r7, #12]
 8001296:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	699b      	ldr	r3, [r3, #24]
 800129e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80012a0:	2001      	movs	r0, #1
 80012a2:	f7ff fdb3 	bl	8000e0c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	68fa      	ldr	r2, [r7, #12]
 80012ac:	619a      	str	r2, [r3, #24]
}
 80012ae:	bf00      	nop
 80012b0:	3710      	adds	r7, #16
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	fd20810f 	.word	0xfd20810f

080012bc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80012ce:	699b      	ldr	r3, [r3, #24]
 80012d0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80012d2:	68fa      	ldr	r2, [r7, #12]
 80012d4:	4b3d      	ldr	r3, [pc, #244]	@ (80013cc <ETH_SetDMAConfig+0x110>)
 80012d6:	4013      	ands	r3, r2
 80012d8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	7b1b      	ldrb	r3, [r3, #12]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d102      	bne.n	80012e8 <ETH_SetDMAConfig+0x2c>
 80012e2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80012e6:	e000      	b.n	80012ea <ETH_SetDMAConfig+0x2e>
 80012e8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	7b5b      	ldrb	r3, [r3, #13]
 80012ee:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80012f0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80012f2:	683a      	ldr	r2, [r7, #0]
 80012f4:	7f52      	ldrb	r2, [r2, #29]
 80012f6:	2a00      	cmp	r2, #0
 80012f8:	d102      	bne.n	8001300 <ETH_SetDMAConfig+0x44>
 80012fa:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80012fe:	e000      	b.n	8001302 <ETH_SetDMAConfig+0x46>
 8001300:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001302:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	7b9b      	ldrb	r3, [r3, #14]
 8001308:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800130a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001310:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	7f1b      	ldrb	r3, [r3, #28]
 8001316:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001318:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	7f9b      	ldrb	r3, [r3, #30]
 800131e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001320:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001326:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800132e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001330:	4313      	orrs	r3, r2
 8001332:	68fa      	ldr	r2, [r7, #12]
 8001334:	4313      	orrs	r3, r2
 8001336:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001340:	461a      	mov	r2, r3
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001352:	2001      	movs	r0, #1
 8001354:	f7ff fd5a 	bl	8000e0c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001360:	461a      	mov	r2, r3
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	791b      	ldrb	r3, [r3, #4]
 800136a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001370:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001376:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800137c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001384:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001386:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800138c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800138e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001394:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	6812      	ldr	r2, [r2, #0]
 800139a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800139e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80013a2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80013b0:	2001      	movs	r0, #1
 80013b2:	f7ff fd2b 	bl	8000e0c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013be:	461a      	mov	r2, r3
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	6013      	str	r3, [r2, #0]
}
 80013c4:	bf00      	nop
 80013c6:	3710      	adds	r7, #16
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	f8de3f23 	.word	0xf8de3f23

080013d0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b0a6      	sub	sp, #152	@ 0x98
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80013d8:	2301      	movs	r3, #1
 80013da:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 80013de:	2301      	movs	r3, #1
 80013e0:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80013e4:	2300      	movs	r3, #0
 80013e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80013e8:	2300      	movs	r3, #0
 80013ea:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80013ee:	2301      	movs	r3, #1
 80013f0:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80013f4:	2300      	movs	r3, #0
 80013f6:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80013fa:	2301      	movs	r3, #1
 80013fc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8001400:	2301      	movs	r3, #1
 8001402:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001406:	2300      	movs	r3, #0
 8001408:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800140c:	2300      	movs	r3, #0
 800140e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001412:	2300      	movs	r3, #0
 8001414:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001416:	2300      	movs	r3, #0
 8001418:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800141c:	2300      	movs	r3, #0
 800141e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001420:	2300      	movs	r3, #0
 8001422:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001426:	2300      	movs	r3, #0
 8001428:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800142c:	2300      	movs	r3, #0
 800142e:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001432:	2300      	movs	r3, #0
 8001434:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001438:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800143c:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800143e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001442:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001444:	2300      	movs	r3, #0
 8001446:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800144a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800144e:	4619      	mov	r1, r3
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	f7ff fe7f 	bl	8001154 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001456:	2301      	movs	r3, #1
 8001458:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800145a:	2301      	movs	r3, #1
 800145c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800145e:	2301      	movs	r3, #1
 8001460:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001464:	2301      	movs	r3, #1
 8001466:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001468:	2300      	movs	r3, #0
 800146a:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800146c:	2300      	movs	r3, #0
 800146e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001472:	2300      	movs	r3, #0
 8001474:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001478:	2300      	movs	r3, #0
 800147a:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800147c:	2301      	movs	r3, #1
 800147e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001482:	2301      	movs	r3, #1
 8001484:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001486:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800148a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800148c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001490:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001492:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001496:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001498:	2301      	movs	r3, #1
 800149a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800149e:	2300      	movs	r3, #0
 80014a0:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80014a2:	2300      	movs	r3, #0
 80014a4:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80014a6:	f107 0308 	add.w	r3, r7, #8
 80014aa:	4619      	mov	r1, r3
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f7ff ff05 	bl	80012bc <ETH_SetDMAConfig>
}
 80014b2:	bf00      	nop
 80014b4:	3798      	adds	r7, #152	@ 0x98
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
	...

080014bc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80014bc:	b480      	push	{r7}
 80014be:	b087      	sub	sp, #28
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	60f8      	str	r0, [r7, #12]
 80014c4:	60b9      	str	r1, [r7, #8]
 80014c6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	3305      	adds	r3, #5
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	021b      	lsls	r3, r3, #8
 80014d0:	687a      	ldr	r2, [r7, #4]
 80014d2:	3204      	adds	r2, #4
 80014d4:	7812      	ldrb	r2, [r2, #0]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80014da:	68ba      	ldr	r2, [r7, #8]
 80014dc:	4b11      	ldr	r3, [pc, #68]	@ (8001524 <ETH_MACAddressConfig+0x68>)
 80014de:	4413      	add	r3, r2
 80014e0:	461a      	mov	r2, r3
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	3303      	adds	r3, #3
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	061a      	lsls	r2, r3, #24
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	3302      	adds	r3, #2
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	041b      	lsls	r3, r3, #16
 80014f6:	431a      	orrs	r2, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	3301      	adds	r3, #1
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	021b      	lsls	r3, r3, #8
 8001500:	4313      	orrs	r3, r2
 8001502:	687a      	ldr	r2, [r7, #4]
 8001504:	7812      	ldrb	r2, [r2, #0]
 8001506:	4313      	orrs	r3, r2
 8001508:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800150a:	68ba      	ldr	r2, [r7, #8]
 800150c:	4b06      	ldr	r3, [pc, #24]	@ (8001528 <ETH_MACAddressConfig+0x6c>)
 800150e:	4413      	add	r3, r2
 8001510:	461a      	mov	r2, r3
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	6013      	str	r3, [r2, #0]
}
 8001516:	bf00      	nop
 8001518:	371c      	adds	r7, #28
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	40028040 	.word	0x40028040
 8001528:	40028044 	.word	0x40028044

0800152c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800152c:	b480      	push	{r7}
 800152e:	b085      	sub	sp, #20
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001534:	2300      	movs	r3, #0
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	e03e      	b.n	80015b8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	68d9      	ldr	r1, [r3, #12]
 800153e:	68fa      	ldr	r2, [r7, #12]
 8001540:	4613      	mov	r3, r2
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	4413      	add	r3, r2
 8001546:	00db      	lsls	r3, r3, #3
 8001548:	440b      	add	r3, r1
 800154a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	2200      	movs	r2, #0
 8001550:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	2200      	movs	r2, #0
 8001556:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	2200      	movs	r2, #0
 800155c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	2200      	movs	r2, #0
 8001562:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001564:	68b9      	ldr	r1, [r7, #8]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	68fa      	ldr	r2, [r7, #12]
 800156a:	3206      	adds	r2, #6
 800156c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	2b02      	cmp	r3, #2
 8001580:	d80c      	bhi.n	800159c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	68d9      	ldr	r1, [r3, #12]
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	1c5a      	adds	r2, r3, #1
 800158a:	4613      	mov	r3, r2
 800158c:	009b      	lsls	r3, r3, #2
 800158e:	4413      	add	r3, r2
 8001590:	00db      	lsls	r3, r3, #3
 8001592:	440b      	add	r3, r1
 8001594:	461a      	mov	r2, r3
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	60da      	str	r2, [r3, #12]
 800159a:	e004      	b.n	80015a6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	461a      	mov	r2, r3
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80015ae:	68bb      	ldr	r3, [r7, #8]
 80015b0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	3301      	adds	r3, #1
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	2b03      	cmp	r3, #3
 80015bc:	d9bd      	bls.n	800153a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2200      	movs	r2, #0
 80015c2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	68da      	ldr	r2, [r3, #12]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015d0:	611a      	str	r2, [r3, #16]
}
 80015d2:	bf00      	nop
 80015d4:	3714      	adds	r7, #20
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr

080015de <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80015de:	b480      	push	{r7}
 80015e0:	b085      	sub	sp, #20
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80015e6:	2300      	movs	r3, #0
 80015e8:	60fb      	str	r3, [r7, #12]
 80015ea:	e048      	b.n	800167e <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6919      	ldr	r1, [r3, #16]
 80015f0:	68fa      	ldr	r2, [r7, #12]
 80015f2:	4613      	mov	r3, r2
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	4413      	add	r3, r2
 80015f8:	00db      	lsls	r3, r3, #3
 80015fa:	440b      	add	r3, r1
 80015fc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	2200      	movs	r2, #0
 8001608:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	2200      	movs	r2, #0
 800160e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	2200      	movs	r2, #0
 8001614:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	2200      	movs	r2, #0
 800161a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	2200      	movs	r2, #0
 8001620:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001628:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	695b      	ldr	r3, [r3, #20]
 800162e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001642:	68b9      	ldr	r1, [r7, #8]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	68fa      	ldr	r2, [r7, #12]
 8001648:	3212      	adds	r2, #18
 800164a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	2b02      	cmp	r3, #2
 8001652:	d80c      	bhi.n	800166e <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6919      	ldr	r1, [r3, #16]
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	1c5a      	adds	r2, r3, #1
 800165c:	4613      	mov	r3, r2
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	4413      	add	r3, r2
 8001662:	00db      	lsls	r3, r3, #3
 8001664:	440b      	add	r3, r1
 8001666:	461a      	mov	r2, r3
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	60da      	str	r2, [r3, #12]
 800166c:	e004      	b.n	8001678 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	691b      	ldr	r3, [r3, #16]
 8001672:	461a      	mov	r2, r3
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	3301      	adds	r3, #1
 800167c:	60fb      	str	r3, [r7, #12]
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	2b03      	cmp	r3, #3
 8001682:	d9b3      	bls.n	80015ec <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2200      	movs	r2, #0
 8001688:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2200      	movs	r2, #0
 800168e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2200      	movs	r2, #0
 8001694:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2200      	movs	r2, #0
 800169a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2200      	movs	r2, #0
 80016a0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	691a      	ldr	r2, [r3, #16]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016ae:	60da      	str	r2, [r3, #12]
}
 80016b0:	bf00      	nop
 80016b2:	3714      	adds	r7, #20
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr

080016bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016bc:	b480      	push	{r7}
 80016be:	b089      	sub	sp, #36	@ 0x24
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80016c6:	2300      	movs	r3, #0
 80016c8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80016ca:	2300      	movs	r3, #0
 80016cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80016ce:	2300      	movs	r3, #0
 80016d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80016d2:	2300      	movs	r3, #0
 80016d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80016d6:	2300      	movs	r3, #0
 80016d8:	61fb      	str	r3, [r7, #28]
 80016da:	e175      	b.n	80019c8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80016dc:	2201      	movs	r2, #1
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	fa02 f303 	lsl.w	r3, r2, r3
 80016e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	697a      	ldr	r2, [r7, #20]
 80016ec:	4013      	ands	r3, r2
 80016ee:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80016f0:	693a      	ldr	r2, [r7, #16]
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	f040 8164 	bne.w	80019c2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f003 0303 	and.w	r3, r3, #3
 8001702:	2b01      	cmp	r3, #1
 8001704:	d005      	beq.n	8001712 <HAL_GPIO_Init+0x56>
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f003 0303 	and.w	r3, r3, #3
 800170e:	2b02      	cmp	r3, #2
 8001710:	d130      	bne.n	8001774 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	2203      	movs	r2, #3
 800171e:	fa02 f303 	lsl.w	r3, r2, r3
 8001722:	43db      	mvns	r3, r3
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	4013      	ands	r3, r2
 8001728:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	68da      	ldr	r2, [r3, #12]
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	fa02 f303 	lsl.w	r3, r2, r3
 8001736:	69ba      	ldr	r2, [r7, #24]
 8001738:	4313      	orrs	r3, r2
 800173a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	69ba      	ldr	r2, [r7, #24]
 8001740:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001748:	2201      	movs	r2, #1
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	43db      	mvns	r3, r3
 8001752:	69ba      	ldr	r2, [r7, #24]
 8001754:	4013      	ands	r3, r2
 8001756:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	091b      	lsrs	r3, r3, #4
 800175e:	f003 0201 	and.w	r2, r3, #1
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	fa02 f303 	lsl.w	r3, r2, r3
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	4313      	orrs	r3, r2
 800176c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	69ba      	ldr	r2, [r7, #24]
 8001772:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f003 0303 	and.w	r3, r3, #3
 800177c:	2b03      	cmp	r3, #3
 800177e:	d017      	beq.n	80017b0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	2203      	movs	r2, #3
 800178c:	fa02 f303 	lsl.w	r3, r2, r3
 8001790:	43db      	mvns	r3, r3
 8001792:	69ba      	ldr	r2, [r7, #24]
 8001794:	4013      	ands	r3, r2
 8001796:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	689a      	ldr	r2, [r3, #8]
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	fa02 f303 	lsl.w	r3, r2, r3
 80017a4:	69ba      	ldr	r2, [r7, #24]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f003 0303 	and.w	r3, r3, #3
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d123      	bne.n	8001804 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	08da      	lsrs	r2, r3, #3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	3208      	adds	r2, #8
 80017c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	f003 0307 	and.w	r3, r3, #7
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	220f      	movs	r2, #15
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	43db      	mvns	r3, r3
 80017da:	69ba      	ldr	r2, [r7, #24]
 80017dc:	4013      	ands	r3, r2
 80017de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	691a      	ldr	r2, [r3, #16]
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	f003 0307 	and.w	r3, r3, #7
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	69ba      	ldr	r2, [r7, #24]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	08da      	lsrs	r2, r3, #3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	3208      	adds	r2, #8
 80017fe:	69b9      	ldr	r1, [r7, #24]
 8001800:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	2203      	movs	r2, #3
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	43db      	mvns	r3, r3
 8001816:	69ba      	ldr	r2, [r7, #24]
 8001818:	4013      	ands	r3, r2
 800181a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f003 0203 	and.w	r2, r3, #3
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	005b      	lsls	r3, r3, #1
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	4313      	orrs	r3, r2
 8001830:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001840:	2b00      	cmp	r3, #0
 8001842:	f000 80be 	beq.w	80019c2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001846:	4b66      	ldr	r3, [pc, #408]	@ (80019e0 <HAL_GPIO_Init+0x324>)
 8001848:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800184a:	4a65      	ldr	r2, [pc, #404]	@ (80019e0 <HAL_GPIO_Init+0x324>)
 800184c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001850:	6453      	str	r3, [r2, #68]	@ 0x44
 8001852:	4b63      	ldr	r3, [pc, #396]	@ (80019e0 <HAL_GPIO_Init+0x324>)
 8001854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001856:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800185a:	60fb      	str	r3, [r7, #12]
 800185c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800185e:	4a61      	ldr	r2, [pc, #388]	@ (80019e4 <HAL_GPIO_Init+0x328>)
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	089b      	lsrs	r3, r3, #2
 8001864:	3302      	adds	r3, #2
 8001866:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800186a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	f003 0303 	and.w	r3, r3, #3
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	220f      	movs	r2, #15
 8001876:	fa02 f303 	lsl.w	r3, r2, r3
 800187a:	43db      	mvns	r3, r3
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	4013      	ands	r3, r2
 8001880:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4a58      	ldr	r2, [pc, #352]	@ (80019e8 <HAL_GPIO_Init+0x32c>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d037      	beq.n	80018fa <HAL_GPIO_Init+0x23e>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4a57      	ldr	r2, [pc, #348]	@ (80019ec <HAL_GPIO_Init+0x330>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d031      	beq.n	80018f6 <HAL_GPIO_Init+0x23a>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4a56      	ldr	r2, [pc, #344]	@ (80019f0 <HAL_GPIO_Init+0x334>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d02b      	beq.n	80018f2 <HAL_GPIO_Init+0x236>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4a55      	ldr	r2, [pc, #340]	@ (80019f4 <HAL_GPIO_Init+0x338>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d025      	beq.n	80018ee <HAL_GPIO_Init+0x232>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4a54      	ldr	r2, [pc, #336]	@ (80019f8 <HAL_GPIO_Init+0x33c>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d01f      	beq.n	80018ea <HAL_GPIO_Init+0x22e>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4a53      	ldr	r2, [pc, #332]	@ (80019fc <HAL_GPIO_Init+0x340>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d019      	beq.n	80018e6 <HAL_GPIO_Init+0x22a>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4a52      	ldr	r2, [pc, #328]	@ (8001a00 <HAL_GPIO_Init+0x344>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d013      	beq.n	80018e2 <HAL_GPIO_Init+0x226>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4a51      	ldr	r2, [pc, #324]	@ (8001a04 <HAL_GPIO_Init+0x348>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d00d      	beq.n	80018de <HAL_GPIO_Init+0x222>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4a50      	ldr	r2, [pc, #320]	@ (8001a08 <HAL_GPIO_Init+0x34c>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d007      	beq.n	80018da <HAL_GPIO_Init+0x21e>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4a4f      	ldr	r2, [pc, #316]	@ (8001a0c <HAL_GPIO_Init+0x350>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d101      	bne.n	80018d6 <HAL_GPIO_Init+0x21a>
 80018d2:	2309      	movs	r3, #9
 80018d4:	e012      	b.n	80018fc <HAL_GPIO_Init+0x240>
 80018d6:	230a      	movs	r3, #10
 80018d8:	e010      	b.n	80018fc <HAL_GPIO_Init+0x240>
 80018da:	2308      	movs	r3, #8
 80018dc:	e00e      	b.n	80018fc <HAL_GPIO_Init+0x240>
 80018de:	2307      	movs	r3, #7
 80018e0:	e00c      	b.n	80018fc <HAL_GPIO_Init+0x240>
 80018e2:	2306      	movs	r3, #6
 80018e4:	e00a      	b.n	80018fc <HAL_GPIO_Init+0x240>
 80018e6:	2305      	movs	r3, #5
 80018e8:	e008      	b.n	80018fc <HAL_GPIO_Init+0x240>
 80018ea:	2304      	movs	r3, #4
 80018ec:	e006      	b.n	80018fc <HAL_GPIO_Init+0x240>
 80018ee:	2303      	movs	r3, #3
 80018f0:	e004      	b.n	80018fc <HAL_GPIO_Init+0x240>
 80018f2:	2302      	movs	r3, #2
 80018f4:	e002      	b.n	80018fc <HAL_GPIO_Init+0x240>
 80018f6:	2301      	movs	r3, #1
 80018f8:	e000      	b.n	80018fc <HAL_GPIO_Init+0x240>
 80018fa:	2300      	movs	r3, #0
 80018fc:	69fa      	ldr	r2, [r7, #28]
 80018fe:	f002 0203 	and.w	r2, r2, #3
 8001902:	0092      	lsls	r2, r2, #2
 8001904:	4093      	lsls	r3, r2
 8001906:	69ba      	ldr	r2, [r7, #24]
 8001908:	4313      	orrs	r3, r2
 800190a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800190c:	4935      	ldr	r1, [pc, #212]	@ (80019e4 <HAL_GPIO_Init+0x328>)
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	089b      	lsrs	r3, r3, #2
 8001912:	3302      	adds	r3, #2
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800191a:	4b3d      	ldr	r3, [pc, #244]	@ (8001a10 <HAL_GPIO_Init+0x354>)
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	43db      	mvns	r3, r3
 8001924:	69ba      	ldr	r2, [r7, #24]
 8001926:	4013      	ands	r3, r2
 8001928:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d003      	beq.n	800193e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001936:	69ba      	ldr	r2, [r7, #24]
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	4313      	orrs	r3, r2
 800193c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800193e:	4a34      	ldr	r2, [pc, #208]	@ (8001a10 <HAL_GPIO_Init+0x354>)
 8001940:	69bb      	ldr	r3, [r7, #24]
 8001942:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001944:	4b32      	ldr	r3, [pc, #200]	@ (8001a10 <HAL_GPIO_Init+0x354>)
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	43db      	mvns	r3, r3
 800194e:	69ba      	ldr	r2, [r7, #24]
 8001950:	4013      	ands	r3, r2
 8001952:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800195c:	2b00      	cmp	r3, #0
 800195e:	d003      	beq.n	8001968 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	4313      	orrs	r3, r2
 8001966:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001968:	4a29      	ldr	r2, [pc, #164]	@ (8001a10 <HAL_GPIO_Init+0x354>)
 800196a:	69bb      	ldr	r3, [r7, #24]
 800196c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800196e:	4b28      	ldr	r3, [pc, #160]	@ (8001a10 <HAL_GPIO_Init+0x354>)
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	43db      	mvns	r3, r3
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	4013      	ands	r3, r2
 800197c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d003      	beq.n	8001992 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800198a:	69ba      	ldr	r2, [r7, #24]
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	4313      	orrs	r3, r2
 8001990:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001992:	4a1f      	ldr	r2, [pc, #124]	@ (8001a10 <HAL_GPIO_Init+0x354>)
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001998:	4b1d      	ldr	r3, [pc, #116]	@ (8001a10 <HAL_GPIO_Init+0x354>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	43db      	mvns	r3, r3
 80019a2:	69ba      	ldr	r2, [r7, #24]
 80019a4:	4013      	ands	r3, r2
 80019a6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d003      	beq.n	80019bc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019bc:	4a14      	ldr	r2, [pc, #80]	@ (8001a10 <HAL_GPIO_Init+0x354>)
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	3301      	adds	r3, #1
 80019c6:	61fb      	str	r3, [r7, #28]
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	2b0f      	cmp	r3, #15
 80019cc:	f67f ae86 	bls.w	80016dc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80019d0:	bf00      	nop
 80019d2:	bf00      	nop
 80019d4:	3724      	adds	r7, #36	@ 0x24
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	40023800 	.word	0x40023800
 80019e4:	40013800 	.word	0x40013800
 80019e8:	40020000 	.word	0x40020000
 80019ec:	40020400 	.word	0x40020400
 80019f0:	40020800 	.word	0x40020800
 80019f4:	40020c00 	.word	0x40020c00
 80019f8:	40021000 	.word	0x40021000
 80019fc:	40021400 	.word	0x40021400
 8001a00:	40021800 	.word	0x40021800
 8001a04:	40021c00 	.word	0x40021c00
 8001a08:	40022000 	.word	0x40022000
 8001a0c:	40022400 	.word	0x40022400
 8001a10:	40013c00 	.word	0x40013c00

08001a14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	807b      	strh	r3, [r7, #2]
 8001a20:	4613      	mov	r3, r2
 8001a22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a24:	787b      	ldrb	r3, [r7, #1]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d003      	beq.n	8001a32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a2a:	887a      	ldrh	r2, [r7, #2]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001a30:	e003      	b.n	8001a3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001a32:	887b      	ldrh	r3, [r7, #2]
 8001a34:	041a      	lsls	r2, r3, #16
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	619a      	str	r2, [r3, #24]
}
 8001a3a:	bf00      	nop
 8001a3c:	370c      	adds	r7, #12
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr

08001a46 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001a46:	b580      	push	{r7, lr}
 8001a48:	b086      	sub	sp, #24
 8001a4a:	af02      	add	r7, sp, #8
 8001a4c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d101      	bne.n	8001a58 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e108      	b.n	8001c6a <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d106      	bne.n	8001a78 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f7ff f888 	bl	8000b88 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2203      	movs	r2, #3
 8001a7c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001a86:	d102      	bne.n	8001a8e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f001 ff96 	bl	80039c4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6818      	ldr	r0, [r3, #0]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	7c1a      	ldrb	r2, [r3, #16]
 8001aa0:	f88d 2000 	strb.w	r2, [sp]
 8001aa4:	3304      	adds	r3, #4
 8001aa6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001aa8:	f001 ff32 	bl	8003910 <USB_CoreInit>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d005      	beq.n	8001abe <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2202      	movs	r2, #2
 8001ab6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e0d5      	b.n	8001c6a <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	2100      	movs	r1, #0
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f001 ff8e 	bl	80039e6 <USB_SetCurrentMode>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d005      	beq.n	8001adc <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2202      	movs	r2, #2
 8001ad4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e0c6      	b.n	8001c6a <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001adc:	2300      	movs	r3, #0
 8001ade:	73fb      	strb	r3, [r7, #15]
 8001ae0:	e04a      	b.n	8001b78 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001ae2:	7bfa      	ldrb	r2, [r7, #15]
 8001ae4:	6879      	ldr	r1, [r7, #4]
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	00db      	lsls	r3, r3, #3
 8001aea:	4413      	add	r3, r2
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	440b      	add	r3, r1
 8001af0:	3315      	adds	r3, #21
 8001af2:	2201      	movs	r2, #1
 8001af4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001af6:	7bfa      	ldrb	r2, [r7, #15]
 8001af8:	6879      	ldr	r1, [r7, #4]
 8001afa:	4613      	mov	r3, r2
 8001afc:	00db      	lsls	r3, r3, #3
 8001afe:	4413      	add	r3, r2
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	440b      	add	r3, r1
 8001b04:	3314      	adds	r3, #20
 8001b06:	7bfa      	ldrb	r2, [r7, #15]
 8001b08:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001b0a:	7bfa      	ldrb	r2, [r7, #15]
 8001b0c:	7bfb      	ldrb	r3, [r7, #15]
 8001b0e:	b298      	uxth	r0, r3
 8001b10:	6879      	ldr	r1, [r7, #4]
 8001b12:	4613      	mov	r3, r2
 8001b14:	00db      	lsls	r3, r3, #3
 8001b16:	4413      	add	r3, r2
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	440b      	add	r3, r1
 8001b1c:	332e      	adds	r3, #46	@ 0x2e
 8001b1e:	4602      	mov	r2, r0
 8001b20:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001b22:	7bfa      	ldrb	r2, [r7, #15]
 8001b24:	6879      	ldr	r1, [r7, #4]
 8001b26:	4613      	mov	r3, r2
 8001b28:	00db      	lsls	r3, r3, #3
 8001b2a:	4413      	add	r3, r2
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	440b      	add	r3, r1
 8001b30:	3318      	adds	r3, #24
 8001b32:	2200      	movs	r2, #0
 8001b34:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001b36:	7bfa      	ldrb	r2, [r7, #15]
 8001b38:	6879      	ldr	r1, [r7, #4]
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	00db      	lsls	r3, r3, #3
 8001b3e:	4413      	add	r3, r2
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	440b      	add	r3, r1
 8001b44:	331c      	adds	r3, #28
 8001b46:	2200      	movs	r2, #0
 8001b48:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001b4a:	7bfa      	ldrb	r2, [r7, #15]
 8001b4c:	6879      	ldr	r1, [r7, #4]
 8001b4e:	4613      	mov	r3, r2
 8001b50:	00db      	lsls	r3, r3, #3
 8001b52:	4413      	add	r3, r2
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	440b      	add	r3, r1
 8001b58:	3320      	adds	r3, #32
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001b5e:	7bfa      	ldrb	r2, [r7, #15]
 8001b60:	6879      	ldr	r1, [r7, #4]
 8001b62:	4613      	mov	r3, r2
 8001b64:	00db      	lsls	r3, r3, #3
 8001b66:	4413      	add	r3, r2
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	440b      	add	r3, r1
 8001b6c:	3324      	adds	r3, #36	@ 0x24
 8001b6e:	2200      	movs	r2, #0
 8001b70:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b72:	7bfb      	ldrb	r3, [r7, #15]
 8001b74:	3301      	adds	r3, #1
 8001b76:	73fb      	strb	r3, [r7, #15]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	791b      	ldrb	r3, [r3, #4]
 8001b7c:	7bfa      	ldrb	r2, [r7, #15]
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d3af      	bcc.n	8001ae2 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b82:	2300      	movs	r3, #0
 8001b84:	73fb      	strb	r3, [r7, #15]
 8001b86:	e044      	b.n	8001c12 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001b88:	7bfa      	ldrb	r2, [r7, #15]
 8001b8a:	6879      	ldr	r1, [r7, #4]
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	00db      	lsls	r3, r3, #3
 8001b90:	4413      	add	r3, r2
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	440b      	add	r3, r1
 8001b96:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001b9e:	7bfa      	ldrb	r2, [r7, #15]
 8001ba0:	6879      	ldr	r1, [r7, #4]
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	00db      	lsls	r3, r3, #3
 8001ba6:	4413      	add	r3, r2
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	440b      	add	r3, r1
 8001bac:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001bb0:	7bfa      	ldrb	r2, [r7, #15]
 8001bb2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001bb4:	7bfa      	ldrb	r2, [r7, #15]
 8001bb6:	6879      	ldr	r1, [r7, #4]
 8001bb8:	4613      	mov	r3, r2
 8001bba:	00db      	lsls	r3, r3, #3
 8001bbc:	4413      	add	r3, r2
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	440b      	add	r3, r1
 8001bc2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001bca:	7bfa      	ldrb	r2, [r7, #15]
 8001bcc:	6879      	ldr	r1, [r7, #4]
 8001bce:	4613      	mov	r3, r2
 8001bd0:	00db      	lsls	r3, r3, #3
 8001bd2:	4413      	add	r3, r2
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	440b      	add	r3, r1
 8001bd8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001be0:	7bfa      	ldrb	r2, [r7, #15]
 8001be2:	6879      	ldr	r1, [r7, #4]
 8001be4:	4613      	mov	r3, r2
 8001be6:	00db      	lsls	r3, r3, #3
 8001be8:	4413      	add	r3, r2
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	440b      	add	r3, r1
 8001bee:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001bf6:	7bfa      	ldrb	r2, [r7, #15]
 8001bf8:	6879      	ldr	r1, [r7, #4]
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	00db      	lsls	r3, r3, #3
 8001bfe:	4413      	add	r3, r2
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	440b      	add	r3, r1
 8001c04:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001c08:	2200      	movs	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c0c:	7bfb      	ldrb	r3, [r7, #15]
 8001c0e:	3301      	adds	r3, #1
 8001c10:	73fb      	strb	r3, [r7, #15]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	791b      	ldrb	r3, [r3, #4]
 8001c16:	7bfa      	ldrb	r2, [r7, #15]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d3b5      	bcc.n	8001b88 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6818      	ldr	r0, [r3, #0]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	7c1a      	ldrb	r2, [r3, #16]
 8001c24:	f88d 2000 	strb.w	r2, [sp]
 8001c28:	3304      	adds	r3, #4
 8001c2a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c2c:	f001 ff28 	bl	8003a80 <USB_DevInit>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d005      	beq.n	8001c42 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2202      	movs	r2, #2
 8001c3a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e013      	b.n	8001c6a <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	7b1b      	ldrb	r3, [r3, #12]
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d102      	bne.n	8001c5e <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f000 f80b 	bl	8001c74 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f002 f8e3 	bl	8003e2e <USB_DevDisconnect>

  return HAL_OK;
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3710      	adds	r7, #16
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
	...

08001c74 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b085      	sub	sp, #20
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2201      	movs	r2, #1
 8001c86:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	699b      	ldr	r3, [r3, #24]
 8001c96:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001ca2:	4b05      	ldr	r3, [pc, #20]	@ (8001cb8 <HAL_PCDEx_ActivateLPM+0x44>)
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	68fa      	ldr	r2, [r7, #12]
 8001ca8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8001caa:	2300      	movs	r3, #0
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3714      	adds	r7, #20
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr
 8001cb8:	10000003 	.word	0x10000003

08001cbc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001cc0:	4b05      	ldr	r3, [pc, #20]	@ (8001cd8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a04      	ldr	r2, [pc, #16]	@ (8001cd8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001cc6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cca:	6013      	str	r3, [r2, #0]
}
 8001ccc:	bf00      	nop
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	40007000 	.word	0x40007000

08001cdc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001ce6:	4b23      	ldr	r3, [pc, #140]	@ (8001d74 <HAL_PWREx_EnableOverDrive+0x98>)
 8001ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cea:	4a22      	ldr	r2, [pc, #136]	@ (8001d74 <HAL_PWREx_EnableOverDrive+0x98>)
 8001cec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cf0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cf2:	4b20      	ldr	r3, [pc, #128]	@ (8001d74 <HAL_PWREx_EnableOverDrive+0x98>)
 8001cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cfa:	603b      	str	r3, [r7, #0]
 8001cfc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001cfe:	4b1e      	ldr	r3, [pc, #120]	@ (8001d78 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a1d      	ldr	r2, [pc, #116]	@ (8001d78 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001d04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d08:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d0a:	f7ff f873 	bl	8000df4 <HAL_GetTick>
 8001d0e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001d10:	e009      	b.n	8001d26 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001d12:	f7ff f86f 	bl	8000df4 <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001d20:	d901      	bls.n	8001d26 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e022      	b.n	8001d6c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001d26:	4b14      	ldr	r3, [pc, #80]	@ (8001d78 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d32:	d1ee      	bne.n	8001d12 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001d34:	4b10      	ldr	r3, [pc, #64]	@ (8001d78 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a0f      	ldr	r2, [pc, #60]	@ (8001d78 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001d3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d3e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d40:	f7ff f858 	bl	8000df4 <HAL_GetTick>
 8001d44:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001d46:	e009      	b.n	8001d5c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001d48:	f7ff f854 	bl	8000df4 <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001d56:	d901      	bls.n	8001d5c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	e007      	b.n	8001d6c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001d5c:	4b06      	ldr	r3, [pc, #24]	@ (8001d78 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d64:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001d68:	d1ee      	bne.n	8001d48 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001d6a:	2300      	movs	r3, #0
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3708      	adds	r7, #8
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	40023800 	.word	0x40023800
 8001d78:	40007000 	.word	0x40007000

08001d7c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b086      	sub	sp, #24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001d84:	2300      	movs	r3, #0
 8001d86:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d101      	bne.n	8001d92 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e29b      	b.n	80022ca <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0301 	and.w	r3, r3, #1
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	f000 8087 	beq.w	8001eae <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001da0:	4b96      	ldr	r3, [pc, #600]	@ (8001ffc <HAL_RCC_OscConfig+0x280>)
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	f003 030c 	and.w	r3, r3, #12
 8001da8:	2b04      	cmp	r3, #4
 8001daa:	d00c      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dac:	4b93      	ldr	r3, [pc, #588]	@ (8001ffc <HAL_RCC_OscConfig+0x280>)
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	f003 030c 	and.w	r3, r3, #12
 8001db4:	2b08      	cmp	r3, #8
 8001db6:	d112      	bne.n	8001dde <HAL_RCC_OscConfig+0x62>
 8001db8:	4b90      	ldr	r3, [pc, #576]	@ (8001ffc <HAL_RCC_OscConfig+0x280>)
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001dc0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001dc4:	d10b      	bne.n	8001dde <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dc6:	4b8d      	ldr	r3, [pc, #564]	@ (8001ffc <HAL_RCC_OscConfig+0x280>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d06c      	beq.n	8001eac <HAL_RCC_OscConfig+0x130>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d168      	bne.n	8001eac <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e275      	b.n	80022ca <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001de6:	d106      	bne.n	8001df6 <HAL_RCC_OscConfig+0x7a>
 8001de8:	4b84      	ldr	r3, [pc, #528]	@ (8001ffc <HAL_RCC_OscConfig+0x280>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a83      	ldr	r2, [pc, #524]	@ (8001ffc <HAL_RCC_OscConfig+0x280>)
 8001dee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001df2:	6013      	str	r3, [r2, #0]
 8001df4:	e02e      	b.n	8001e54 <HAL_RCC_OscConfig+0xd8>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d10c      	bne.n	8001e18 <HAL_RCC_OscConfig+0x9c>
 8001dfe:	4b7f      	ldr	r3, [pc, #508]	@ (8001ffc <HAL_RCC_OscConfig+0x280>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a7e      	ldr	r2, [pc, #504]	@ (8001ffc <HAL_RCC_OscConfig+0x280>)
 8001e04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e08:	6013      	str	r3, [r2, #0]
 8001e0a:	4b7c      	ldr	r3, [pc, #496]	@ (8001ffc <HAL_RCC_OscConfig+0x280>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a7b      	ldr	r2, [pc, #492]	@ (8001ffc <HAL_RCC_OscConfig+0x280>)
 8001e10:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e14:	6013      	str	r3, [r2, #0]
 8001e16:	e01d      	b.n	8001e54 <HAL_RCC_OscConfig+0xd8>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e20:	d10c      	bne.n	8001e3c <HAL_RCC_OscConfig+0xc0>
 8001e22:	4b76      	ldr	r3, [pc, #472]	@ (8001ffc <HAL_RCC_OscConfig+0x280>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a75      	ldr	r2, [pc, #468]	@ (8001ffc <HAL_RCC_OscConfig+0x280>)
 8001e28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e2c:	6013      	str	r3, [r2, #0]
 8001e2e:	4b73      	ldr	r3, [pc, #460]	@ (8001ffc <HAL_RCC_OscConfig+0x280>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a72      	ldr	r2, [pc, #456]	@ (8001ffc <HAL_RCC_OscConfig+0x280>)
 8001e34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e38:	6013      	str	r3, [r2, #0]
 8001e3a:	e00b      	b.n	8001e54 <HAL_RCC_OscConfig+0xd8>
 8001e3c:	4b6f      	ldr	r3, [pc, #444]	@ (8001ffc <HAL_RCC_OscConfig+0x280>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a6e      	ldr	r2, [pc, #440]	@ (8001ffc <HAL_RCC_OscConfig+0x280>)
 8001e42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e46:	6013      	str	r3, [r2, #0]
 8001e48:	4b6c      	ldr	r3, [pc, #432]	@ (8001ffc <HAL_RCC_OscConfig+0x280>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a6b      	ldr	r2, [pc, #428]	@ (8001ffc <HAL_RCC_OscConfig+0x280>)
 8001e4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d013      	beq.n	8001e84 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e5c:	f7fe ffca 	bl	8000df4 <HAL_GetTick>
 8001e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e62:	e008      	b.n	8001e76 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e64:	f7fe ffc6 	bl	8000df4 <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	2b64      	cmp	r3, #100	@ 0x64
 8001e70:	d901      	bls.n	8001e76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e229      	b.n	80022ca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e76:	4b61      	ldr	r3, [pc, #388]	@ (8001ffc <HAL_RCC_OscConfig+0x280>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d0f0      	beq.n	8001e64 <HAL_RCC_OscConfig+0xe8>
 8001e82:	e014      	b.n	8001eae <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e84:	f7fe ffb6 	bl	8000df4 <HAL_GetTick>
 8001e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e8a:	e008      	b.n	8001e9e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e8c:	f7fe ffb2 	bl	8000df4 <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	2b64      	cmp	r3, #100	@ 0x64
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e215      	b.n	80022ca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e9e:	4b57      	ldr	r3, [pc, #348]	@ (8001ffc <HAL_RCC_OscConfig+0x280>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d1f0      	bne.n	8001e8c <HAL_RCC_OscConfig+0x110>
 8001eaa:	e000      	b.n	8001eae <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d069      	beq.n	8001f8e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001eba:	4b50      	ldr	r3, [pc, #320]	@ (8001ffc <HAL_RCC_OscConfig+0x280>)
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f003 030c 	and.w	r3, r3, #12
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d00b      	beq.n	8001ede <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ec6:	4b4d      	ldr	r3, [pc, #308]	@ (8001ffc <HAL_RCC_OscConfig+0x280>)
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	f003 030c 	and.w	r3, r3, #12
 8001ece:	2b08      	cmp	r3, #8
 8001ed0:	d11c      	bne.n	8001f0c <HAL_RCC_OscConfig+0x190>
 8001ed2:	4b4a      	ldr	r3, [pc, #296]	@ (8001ffc <HAL_RCC_OscConfig+0x280>)
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d116      	bne.n	8001f0c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ede:	4b47      	ldr	r3, [pc, #284]	@ (8001ffc <HAL_RCC_OscConfig+0x280>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0302 	and.w	r3, r3, #2
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d005      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x17a>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d001      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e1e9      	b.n	80022ca <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ef6:	4b41      	ldr	r3, [pc, #260]	@ (8001ffc <HAL_RCC_OscConfig+0x280>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	691b      	ldr	r3, [r3, #16]
 8001f02:	00db      	lsls	r3, r3, #3
 8001f04:	493d      	ldr	r1, [pc, #244]	@ (8001ffc <HAL_RCC_OscConfig+0x280>)
 8001f06:	4313      	orrs	r3, r2
 8001f08:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f0a:	e040      	b.n	8001f8e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d023      	beq.n	8001f5c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f14:	4b39      	ldr	r3, [pc, #228]	@ (8001ffc <HAL_RCC_OscConfig+0x280>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a38      	ldr	r2, [pc, #224]	@ (8001ffc <HAL_RCC_OscConfig+0x280>)
 8001f1a:	f043 0301 	orr.w	r3, r3, #1
 8001f1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f20:	f7fe ff68 	bl	8000df4 <HAL_GetTick>
 8001f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f26:	e008      	b.n	8001f3a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f28:	f7fe ff64 	bl	8000df4 <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e1c7      	b.n	80022ca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f3a:	4b30      	ldr	r3, [pc, #192]	@ (8001ffc <HAL_RCC_OscConfig+0x280>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d0f0      	beq.n	8001f28 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f46:	4b2d      	ldr	r3, [pc, #180]	@ (8001ffc <HAL_RCC_OscConfig+0x280>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	691b      	ldr	r3, [r3, #16]
 8001f52:	00db      	lsls	r3, r3, #3
 8001f54:	4929      	ldr	r1, [pc, #164]	@ (8001ffc <HAL_RCC_OscConfig+0x280>)
 8001f56:	4313      	orrs	r3, r2
 8001f58:	600b      	str	r3, [r1, #0]
 8001f5a:	e018      	b.n	8001f8e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f5c:	4b27      	ldr	r3, [pc, #156]	@ (8001ffc <HAL_RCC_OscConfig+0x280>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a26      	ldr	r2, [pc, #152]	@ (8001ffc <HAL_RCC_OscConfig+0x280>)
 8001f62:	f023 0301 	bic.w	r3, r3, #1
 8001f66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f68:	f7fe ff44 	bl	8000df4 <HAL_GetTick>
 8001f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f6e:	e008      	b.n	8001f82 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f70:	f7fe ff40 	bl	8000df4 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d901      	bls.n	8001f82 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e1a3      	b.n	80022ca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f82:	4b1e      	ldr	r3, [pc, #120]	@ (8001ffc <HAL_RCC_OscConfig+0x280>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0302 	and.w	r3, r3, #2
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d1f0      	bne.n	8001f70 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0308 	and.w	r3, r3, #8
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d038      	beq.n	800200c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	695b      	ldr	r3, [r3, #20]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d019      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fa2:	4b16      	ldr	r3, [pc, #88]	@ (8001ffc <HAL_RCC_OscConfig+0x280>)
 8001fa4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001fa6:	4a15      	ldr	r2, [pc, #84]	@ (8001ffc <HAL_RCC_OscConfig+0x280>)
 8001fa8:	f043 0301 	orr.w	r3, r3, #1
 8001fac:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fae:	f7fe ff21 	bl	8000df4 <HAL_GetTick>
 8001fb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fb4:	e008      	b.n	8001fc8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fb6:	f7fe ff1d 	bl	8000df4 <HAL_GetTick>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	2b02      	cmp	r3, #2
 8001fc2:	d901      	bls.n	8001fc8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	e180      	b.n	80022ca <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fc8:	4b0c      	ldr	r3, [pc, #48]	@ (8001ffc <HAL_RCC_OscConfig+0x280>)
 8001fca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001fcc:	f003 0302 	and.w	r3, r3, #2
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d0f0      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x23a>
 8001fd4:	e01a      	b.n	800200c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fd6:	4b09      	ldr	r3, [pc, #36]	@ (8001ffc <HAL_RCC_OscConfig+0x280>)
 8001fd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001fda:	4a08      	ldr	r2, [pc, #32]	@ (8001ffc <HAL_RCC_OscConfig+0x280>)
 8001fdc:	f023 0301 	bic.w	r3, r3, #1
 8001fe0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fe2:	f7fe ff07 	bl	8000df4 <HAL_GetTick>
 8001fe6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fe8:	e00a      	b.n	8002000 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fea:	f7fe ff03 	bl	8000df4 <HAL_GetTick>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	d903      	bls.n	8002000 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	e166      	b.n	80022ca <HAL_RCC_OscConfig+0x54e>
 8001ffc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002000:	4b92      	ldr	r3, [pc, #584]	@ (800224c <HAL_RCC_OscConfig+0x4d0>)
 8002002:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002004:	f003 0302 	and.w	r3, r3, #2
 8002008:	2b00      	cmp	r3, #0
 800200a:	d1ee      	bne.n	8001fea <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0304 	and.w	r3, r3, #4
 8002014:	2b00      	cmp	r3, #0
 8002016:	f000 80a4 	beq.w	8002162 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800201a:	4b8c      	ldr	r3, [pc, #560]	@ (800224c <HAL_RCC_OscConfig+0x4d0>)
 800201c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800201e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d10d      	bne.n	8002042 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002026:	4b89      	ldr	r3, [pc, #548]	@ (800224c <HAL_RCC_OscConfig+0x4d0>)
 8002028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800202a:	4a88      	ldr	r2, [pc, #544]	@ (800224c <HAL_RCC_OscConfig+0x4d0>)
 800202c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002030:	6413      	str	r3, [r2, #64]	@ 0x40
 8002032:	4b86      	ldr	r3, [pc, #536]	@ (800224c <HAL_RCC_OscConfig+0x4d0>)
 8002034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002036:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800203a:	60bb      	str	r3, [r7, #8]
 800203c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800203e:	2301      	movs	r3, #1
 8002040:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002042:	4b83      	ldr	r3, [pc, #524]	@ (8002250 <HAL_RCC_OscConfig+0x4d4>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800204a:	2b00      	cmp	r3, #0
 800204c:	d118      	bne.n	8002080 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800204e:	4b80      	ldr	r3, [pc, #512]	@ (8002250 <HAL_RCC_OscConfig+0x4d4>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a7f      	ldr	r2, [pc, #508]	@ (8002250 <HAL_RCC_OscConfig+0x4d4>)
 8002054:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002058:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800205a:	f7fe fecb 	bl	8000df4 <HAL_GetTick>
 800205e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002060:	e008      	b.n	8002074 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002062:	f7fe fec7 	bl	8000df4 <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	2b64      	cmp	r3, #100	@ 0x64
 800206e:	d901      	bls.n	8002074 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002070:	2303      	movs	r3, #3
 8002072:	e12a      	b.n	80022ca <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002074:	4b76      	ldr	r3, [pc, #472]	@ (8002250 <HAL_RCC_OscConfig+0x4d4>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800207c:	2b00      	cmp	r3, #0
 800207e:	d0f0      	beq.n	8002062 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	2b01      	cmp	r3, #1
 8002086:	d106      	bne.n	8002096 <HAL_RCC_OscConfig+0x31a>
 8002088:	4b70      	ldr	r3, [pc, #448]	@ (800224c <HAL_RCC_OscConfig+0x4d0>)
 800208a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800208c:	4a6f      	ldr	r2, [pc, #444]	@ (800224c <HAL_RCC_OscConfig+0x4d0>)
 800208e:	f043 0301 	orr.w	r3, r3, #1
 8002092:	6713      	str	r3, [r2, #112]	@ 0x70
 8002094:	e02d      	b.n	80020f2 <HAL_RCC_OscConfig+0x376>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d10c      	bne.n	80020b8 <HAL_RCC_OscConfig+0x33c>
 800209e:	4b6b      	ldr	r3, [pc, #428]	@ (800224c <HAL_RCC_OscConfig+0x4d0>)
 80020a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020a2:	4a6a      	ldr	r2, [pc, #424]	@ (800224c <HAL_RCC_OscConfig+0x4d0>)
 80020a4:	f023 0301 	bic.w	r3, r3, #1
 80020a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80020aa:	4b68      	ldr	r3, [pc, #416]	@ (800224c <HAL_RCC_OscConfig+0x4d0>)
 80020ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020ae:	4a67      	ldr	r2, [pc, #412]	@ (800224c <HAL_RCC_OscConfig+0x4d0>)
 80020b0:	f023 0304 	bic.w	r3, r3, #4
 80020b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80020b6:	e01c      	b.n	80020f2 <HAL_RCC_OscConfig+0x376>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	2b05      	cmp	r3, #5
 80020be:	d10c      	bne.n	80020da <HAL_RCC_OscConfig+0x35e>
 80020c0:	4b62      	ldr	r3, [pc, #392]	@ (800224c <HAL_RCC_OscConfig+0x4d0>)
 80020c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020c4:	4a61      	ldr	r2, [pc, #388]	@ (800224c <HAL_RCC_OscConfig+0x4d0>)
 80020c6:	f043 0304 	orr.w	r3, r3, #4
 80020ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80020cc:	4b5f      	ldr	r3, [pc, #380]	@ (800224c <HAL_RCC_OscConfig+0x4d0>)
 80020ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020d0:	4a5e      	ldr	r2, [pc, #376]	@ (800224c <HAL_RCC_OscConfig+0x4d0>)
 80020d2:	f043 0301 	orr.w	r3, r3, #1
 80020d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80020d8:	e00b      	b.n	80020f2 <HAL_RCC_OscConfig+0x376>
 80020da:	4b5c      	ldr	r3, [pc, #368]	@ (800224c <HAL_RCC_OscConfig+0x4d0>)
 80020dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020de:	4a5b      	ldr	r2, [pc, #364]	@ (800224c <HAL_RCC_OscConfig+0x4d0>)
 80020e0:	f023 0301 	bic.w	r3, r3, #1
 80020e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80020e6:	4b59      	ldr	r3, [pc, #356]	@ (800224c <HAL_RCC_OscConfig+0x4d0>)
 80020e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020ea:	4a58      	ldr	r2, [pc, #352]	@ (800224c <HAL_RCC_OscConfig+0x4d0>)
 80020ec:	f023 0304 	bic.w	r3, r3, #4
 80020f0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d015      	beq.n	8002126 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020fa:	f7fe fe7b 	bl	8000df4 <HAL_GetTick>
 80020fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002100:	e00a      	b.n	8002118 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002102:	f7fe fe77 	bl	8000df4 <HAL_GetTick>
 8002106:	4602      	mov	r2, r0
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002110:	4293      	cmp	r3, r2
 8002112:	d901      	bls.n	8002118 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	e0d8      	b.n	80022ca <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002118:	4b4c      	ldr	r3, [pc, #304]	@ (800224c <HAL_RCC_OscConfig+0x4d0>)
 800211a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800211c:	f003 0302 	and.w	r3, r3, #2
 8002120:	2b00      	cmp	r3, #0
 8002122:	d0ee      	beq.n	8002102 <HAL_RCC_OscConfig+0x386>
 8002124:	e014      	b.n	8002150 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002126:	f7fe fe65 	bl	8000df4 <HAL_GetTick>
 800212a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800212c:	e00a      	b.n	8002144 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800212e:	f7fe fe61 	bl	8000df4 <HAL_GetTick>
 8002132:	4602      	mov	r2, r0
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	1ad3      	subs	r3, r2, r3
 8002138:	f241 3288 	movw	r2, #5000	@ 0x1388
 800213c:	4293      	cmp	r3, r2
 800213e:	d901      	bls.n	8002144 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	e0c2      	b.n	80022ca <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002144:	4b41      	ldr	r3, [pc, #260]	@ (800224c <HAL_RCC_OscConfig+0x4d0>)
 8002146:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002148:	f003 0302 	and.w	r3, r3, #2
 800214c:	2b00      	cmp	r3, #0
 800214e:	d1ee      	bne.n	800212e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002150:	7dfb      	ldrb	r3, [r7, #23]
 8002152:	2b01      	cmp	r3, #1
 8002154:	d105      	bne.n	8002162 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002156:	4b3d      	ldr	r3, [pc, #244]	@ (800224c <HAL_RCC_OscConfig+0x4d0>)
 8002158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800215a:	4a3c      	ldr	r2, [pc, #240]	@ (800224c <HAL_RCC_OscConfig+0x4d0>)
 800215c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002160:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	699b      	ldr	r3, [r3, #24]
 8002166:	2b00      	cmp	r3, #0
 8002168:	f000 80ae 	beq.w	80022c8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800216c:	4b37      	ldr	r3, [pc, #220]	@ (800224c <HAL_RCC_OscConfig+0x4d0>)
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	f003 030c 	and.w	r3, r3, #12
 8002174:	2b08      	cmp	r3, #8
 8002176:	d06d      	beq.n	8002254 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	2b02      	cmp	r3, #2
 800217e:	d14b      	bne.n	8002218 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002180:	4b32      	ldr	r3, [pc, #200]	@ (800224c <HAL_RCC_OscConfig+0x4d0>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a31      	ldr	r2, [pc, #196]	@ (800224c <HAL_RCC_OscConfig+0x4d0>)
 8002186:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800218a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800218c:	f7fe fe32 	bl	8000df4 <HAL_GetTick>
 8002190:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002192:	e008      	b.n	80021a6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002194:	f7fe fe2e 	bl	8000df4 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e091      	b.n	80022ca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021a6:	4b29      	ldr	r3, [pc, #164]	@ (800224c <HAL_RCC_OscConfig+0x4d0>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d1f0      	bne.n	8002194 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	69da      	ldr	r2, [r3, #28]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6a1b      	ldr	r3, [r3, #32]
 80021ba:	431a      	orrs	r2, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021c0:	019b      	lsls	r3, r3, #6
 80021c2:	431a      	orrs	r2, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021c8:	085b      	lsrs	r3, r3, #1
 80021ca:	3b01      	subs	r3, #1
 80021cc:	041b      	lsls	r3, r3, #16
 80021ce:	431a      	orrs	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021d4:	061b      	lsls	r3, r3, #24
 80021d6:	431a      	orrs	r2, r3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021dc:	071b      	lsls	r3, r3, #28
 80021de:	491b      	ldr	r1, [pc, #108]	@ (800224c <HAL_RCC_OscConfig+0x4d0>)
 80021e0:	4313      	orrs	r3, r2
 80021e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021e4:	4b19      	ldr	r3, [pc, #100]	@ (800224c <HAL_RCC_OscConfig+0x4d0>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a18      	ldr	r2, [pc, #96]	@ (800224c <HAL_RCC_OscConfig+0x4d0>)
 80021ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80021ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f0:	f7fe fe00 	bl	8000df4 <HAL_GetTick>
 80021f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021f6:	e008      	b.n	800220a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021f8:	f7fe fdfc 	bl	8000df4 <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	2b02      	cmp	r3, #2
 8002204:	d901      	bls.n	800220a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e05f      	b.n	80022ca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800220a:	4b10      	ldr	r3, [pc, #64]	@ (800224c <HAL_RCC_OscConfig+0x4d0>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d0f0      	beq.n	80021f8 <HAL_RCC_OscConfig+0x47c>
 8002216:	e057      	b.n	80022c8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002218:	4b0c      	ldr	r3, [pc, #48]	@ (800224c <HAL_RCC_OscConfig+0x4d0>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a0b      	ldr	r2, [pc, #44]	@ (800224c <HAL_RCC_OscConfig+0x4d0>)
 800221e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002222:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002224:	f7fe fde6 	bl	8000df4 <HAL_GetTick>
 8002228:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800222a:	e008      	b.n	800223e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800222c:	f7fe fde2 	bl	8000df4 <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	2b02      	cmp	r3, #2
 8002238:	d901      	bls.n	800223e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e045      	b.n	80022ca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800223e:	4b03      	ldr	r3, [pc, #12]	@ (800224c <HAL_RCC_OscConfig+0x4d0>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d1f0      	bne.n	800222c <HAL_RCC_OscConfig+0x4b0>
 800224a:	e03d      	b.n	80022c8 <HAL_RCC_OscConfig+0x54c>
 800224c:	40023800 	.word	0x40023800
 8002250:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002254:	4b1f      	ldr	r3, [pc, #124]	@ (80022d4 <HAL_RCC_OscConfig+0x558>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	699b      	ldr	r3, [r3, #24]
 800225e:	2b01      	cmp	r3, #1
 8002260:	d030      	beq.n	80022c4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800226c:	429a      	cmp	r2, r3
 800226e:	d129      	bne.n	80022c4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800227a:	429a      	cmp	r2, r3
 800227c:	d122      	bne.n	80022c4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800227e:	68fa      	ldr	r2, [r7, #12]
 8002280:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002284:	4013      	ands	r3, r2
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800228a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800228c:	4293      	cmp	r3, r2
 800228e:	d119      	bne.n	80022c4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800229a:	085b      	lsrs	r3, r3, #1
 800229c:	3b01      	subs	r3, #1
 800229e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d10f      	bne.n	80022c4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022ae:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d107      	bne.n	80022c4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022be:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d001      	beq.n	80022c8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e000      	b.n	80022ca <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3718      	adds	r7, #24
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	40023800 	.word	0x40023800

080022d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80022e2:	2300      	movs	r3, #0
 80022e4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d101      	bne.n	80022f0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e0d0      	b.n	8002492 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022f0:	4b6a      	ldr	r3, [pc, #424]	@ (800249c <HAL_RCC_ClockConfig+0x1c4>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 030f 	and.w	r3, r3, #15
 80022f8:	683a      	ldr	r2, [r7, #0]
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d910      	bls.n	8002320 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022fe:	4b67      	ldr	r3, [pc, #412]	@ (800249c <HAL_RCC_ClockConfig+0x1c4>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f023 020f 	bic.w	r2, r3, #15
 8002306:	4965      	ldr	r1, [pc, #404]	@ (800249c <HAL_RCC_ClockConfig+0x1c4>)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	4313      	orrs	r3, r2
 800230c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800230e:	4b63      	ldr	r3, [pc, #396]	@ (800249c <HAL_RCC_ClockConfig+0x1c4>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 030f 	and.w	r3, r3, #15
 8002316:	683a      	ldr	r2, [r7, #0]
 8002318:	429a      	cmp	r2, r3
 800231a:	d001      	beq.n	8002320 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e0b8      	b.n	8002492 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0302 	and.w	r3, r3, #2
 8002328:	2b00      	cmp	r3, #0
 800232a:	d020      	beq.n	800236e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0304 	and.w	r3, r3, #4
 8002334:	2b00      	cmp	r3, #0
 8002336:	d005      	beq.n	8002344 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002338:	4b59      	ldr	r3, [pc, #356]	@ (80024a0 <HAL_RCC_ClockConfig+0x1c8>)
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	4a58      	ldr	r2, [pc, #352]	@ (80024a0 <HAL_RCC_ClockConfig+0x1c8>)
 800233e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002342:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0308 	and.w	r3, r3, #8
 800234c:	2b00      	cmp	r3, #0
 800234e:	d005      	beq.n	800235c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002350:	4b53      	ldr	r3, [pc, #332]	@ (80024a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	4a52      	ldr	r2, [pc, #328]	@ (80024a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002356:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800235a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800235c:	4b50      	ldr	r3, [pc, #320]	@ (80024a0 <HAL_RCC_ClockConfig+0x1c8>)
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	494d      	ldr	r1, [pc, #308]	@ (80024a0 <HAL_RCC_ClockConfig+0x1c8>)
 800236a:	4313      	orrs	r3, r2
 800236c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0301 	and.w	r3, r3, #1
 8002376:	2b00      	cmp	r3, #0
 8002378:	d040      	beq.n	80023fc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	2b01      	cmp	r3, #1
 8002380:	d107      	bne.n	8002392 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002382:	4b47      	ldr	r3, [pc, #284]	@ (80024a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d115      	bne.n	80023ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e07f      	b.n	8002492 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	2b02      	cmp	r3, #2
 8002398:	d107      	bne.n	80023aa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800239a:	4b41      	ldr	r3, [pc, #260]	@ (80024a0 <HAL_RCC_ClockConfig+0x1c8>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d109      	bne.n	80023ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e073      	b.n	8002492 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023aa:	4b3d      	ldr	r3, [pc, #244]	@ (80024a0 <HAL_RCC_ClockConfig+0x1c8>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0302 	and.w	r3, r3, #2
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d101      	bne.n	80023ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e06b      	b.n	8002492 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023ba:	4b39      	ldr	r3, [pc, #228]	@ (80024a0 <HAL_RCC_ClockConfig+0x1c8>)
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f023 0203 	bic.w	r2, r3, #3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	4936      	ldr	r1, [pc, #216]	@ (80024a0 <HAL_RCC_ClockConfig+0x1c8>)
 80023c8:	4313      	orrs	r3, r2
 80023ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023cc:	f7fe fd12 	bl	8000df4 <HAL_GetTick>
 80023d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023d2:	e00a      	b.n	80023ea <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023d4:	f7fe fd0e 	bl	8000df4 <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d901      	bls.n	80023ea <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e053      	b.n	8002492 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ea:	4b2d      	ldr	r3, [pc, #180]	@ (80024a0 <HAL_RCC_ClockConfig+0x1c8>)
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f003 020c 	and.w	r2, r3, #12
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d1eb      	bne.n	80023d4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023fc:	4b27      	ldr	r3, [pc, #156]	@ (800249c <HAL_RCC_ClockConfig+0x1c4>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 030f 	and.w	r3, r3, #15
 8002404:	683a      	ldr	r2, [r7, #0]
 8002406:	429a      	cmp	r2, r3
 8002408:	d210      	bcs.n	800242c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800240a:	4b24      	ldr	r3, [pc, #144]	@ (800249c <HAL_RCC_ClockConfig+0x1c4>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f023 020f 	bic.w	r2, r3, #15
 8002412:	4922      	ldr	r1, [pc, #136]	@ (800249c <HAL_RCC_ClockConfig+0x1c4>)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	4313      	orrs	r3, r2
 8002418:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800241a:	4b20      	ldr	r3, [pc, #128]	@ (800249c <HAL_RCC_ClockConfig+0x1c4>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 030f 	and.w	r3, r3, #15
 8002422:	683a      	ldr	r2, [r7, #0]
 8002424:	429a      	cmp	r2, r3
 8002426:	d001      	beq.n	800242c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e032      	b.n	8002492 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0304 	and.w	r3, r3, #4
 8002434:	2b00      	cmp	r3, #0
 8002436:	d008      	beq.n	800244a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002438:	4b19      	ldr	r3, [pc, #100]	@ (80024a0 <HAL_RCC_ClockConfig+0x1c8>)
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	4916      	ldr	r1, [pc, #88]	@ (80024a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002446:	4313      	orrs	r3, r2
 8002448:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0308 	and.w	r3, r3, #8
 8002452:	2b00      	cmp	r3, #0
 8002454:	d009      	beq.n	800246a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002456:	4b12      	ldr	r3, [pc, #72]	@ (80024a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	00db      	lsls	r3, r3, #3
 8002464:	490e      	ldr	r1, [pc, #56]	@ (80024a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002466:	4313      	orrs	r3, r2
 8002468:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800246a:	f000 f821 	bl	80024b0 <HAL_RCC_GetSysClockFreq>
 800246e:	4602      	mov	r2, r0
 8002470:	4b0b      	ldr	r3, [pc, #44]	@ (80024a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	091b      	lsrs	r3, r3, #4
 8002476:	f003 030f 	and.w	r3, r3, #15
 800247a:	490a      	ldr	r1, [pc, #40]	@ (80024a4 <HAL_RCC_ClockConfig+0x1cc>)
 800247c:	5ccb      	ldrb	r3, [r1, r3]
 800247e:	fa22 f303 	lsr.w	r3, r2, r3
 8002482:	4a09      	ldr	r2, [pc, #36]	@ (80024a8 <HAL_RCC_ClockConfig+0x1d0>)
 8002484:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002486:	4b09      	ldr	r3, [pc, #36]	@ (80024ac <HAL_RCC_ClockConfig+0x1d4>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4618      	mov	r0, r3
 800248c:	f7fe fc6e 	bl	8000d6c <HAL_InitTick>

  return HAL_OK;
 8002490:	2300      	movs	r3, #0
}
 8002492:	4618      	mov	r0, r3
 8002494:	3710      	adds	r7, #16
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	40023c00 	.word	0x40023c00
 80024a0:	40023800 	.word	0x40023800
 80024a4:	08003f6c 	.word	0x08003f6c
 80024a8:	20000000 	.word	0x20000000
 80024ac:	20000004 	.word	0x20000004

080024b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024b4:	b094      	sub	sp, #80	@ 0x50
 80024b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80024b8:	2300      	movs	r3, #0
 80024ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80024bc:	2300      	movs	r3, #0
 80024be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80024c0:	2300      	movs	r3, #0
 80024c2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80024c4:	2300      	movs	r3, #0
 80024c6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024c8:	4b79      	ldr	r3, [pc, #484]	@ (80026b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f003 030c 	and.w	r3, r3, #12
 80024d0:	2b08      	cmp	r3, #8
 80024d2:	d00d      	beq.n	80024f0 <HAL_RCC_GetSysClockFreq+0x40>
 80024d4:	2b08      	cmp	r3, #8
 80024d6:	f200 80e1 	bhi.w	800269c <HAL_RCC_GetSysClockFreq+0x1ec>
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d002      	beq.n	80024e4 <HAL_RCC_GetSysClockFreq+0x34>
 80024de:	2b04      	cmp	r3, #4
 80024e0:	d003      	beq.n	80024ea <HAL_RCC_GetSysClockFreq+0x3a>
 80024e2:	e0db      	b.n	800269c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80024e4:	4b73      	ldr	r3, [pc, #460]	@ (80026b4 <HAL_RCC_GetSysClockFreq+0x204>)
 80024e6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80024e8:	e0db      	b.n	80026a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80024ea:	4b73      	ldr	r3, [pc, #460]	@ (80026b8 <HAL_RCC_GetSysClockFreq+0x208>)
 80024ec:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80024ee:	e0d8      	b.n	80026a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024f0:	4b6f      	ldr	r3, [pc, #444]	@ (80026b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80024f8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80024fa:	4b6d      	ldr	r3, [pc, #436]	@ (80026b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d063      	beq.n	80025ce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002506:	4b6a      	ldr	r3, [pc, #424]	@ (80026b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	099b      	lsrs	r3, r3, #6
 800250c:	2200      	movs	r2, #0
 800250e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002510:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002512:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002514:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002518:	633b      	str	r3, [r7, #48]	@ 0x30
 800251a:	2300      	movs	r3, #0
 800251c:	637b      	str	r3, [r7, #52]	@ 0x34
 800251e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002522:	4622      	mov	r2, r4
 8002524:	462b      	mov	r3, r5
 8002526:	f04f 0000 	mov.w	r0, #0
 800252a:	f04f 0100 	mov.w	r1, #0
 800252e:	0159      	lsls	r1, r3, #5
 8002530:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002534:	0150      	lsls	r0, r2, #5
 8002536:	4602      	mov	r2, r0
 8002538:	460b      	mov	r3, r1
 800253a:	4621      	mov	r1, r4
 800253c:	1a51      	subs	r1, r2, r1
 800253e:	6139      	str	r1, [r7, #16]
 8002540:	4629      	mov	r1, r5
 8002542:	eb63 0301 	sbc.w	r3, r3, r1
 8002546:	617b      	str	r3, [r7, #20]
 8002548:	f04f 0200 	mov.w	r2, #0
 800254c:	f04f 0300 	mov.w	r3, #0
 8002550:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002554:	4659      	mov	r1, fp
 8002556:	018b      	lsls	r3, r1, #6
 8002558:	4651      	mov	r1, sl
 800255a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800255e:	4651      	mov	r1, sl
 8002560:	018a      	lsls	r2, r1, #6
 8002562:	4651      	mov	r1, sl
 8002564:	ebb2 0801 	subs.w	r8, r2, r1
 8002568:	4659      	mov	r1, fp
 800256a:	eb63 0901 	sbc.w	r9, r3, r1
 800256e:	f04f 0200 	mov.w	r2, #0
 8002572:	f04f 0300 	mov.w	r3, #0
 8002576:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800257a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800257e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002582:	4690      	mov	r8, r2
 8002584:	4699      	mov	r9, r3
 8002586:	4623      	mov	r3, r4
 8002588:	eb18 0303 	adds.w	r3, r8, r3
 800258c:	60bb      	str	r3, [r7, #8]
 800258e:	462b      	mov	r3, r5
 8002590:	eb49 0303 	adc.w	r3, r9, r3
 8002594:	60fb      	str	r3, [r7, #12]
 8002596:	f04f 0200 	mov.w	r2, #0
 800259a:	f04f 0300 	mov.w	r3, #0
 800259e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80025a2:	4629      	mov	r1, r5
 80025a4:	024b      	lsls	r3, r1, #9
 80025a6:	4621      	mov	r1, r4
 80025a8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80025ac:	4621      	mov	r1, r4
 80025ae:	024a      	lsls	r2, r1, #9
 80025b0:	4610      	mov	r0, r2
 80025b2:	4619      	mov	r1, r3
 80025b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80025b6:	2200      	movs	r2, #0
 80025b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80025ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80025bc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80025c0:	f7fd fe3a 	bl	8000238 <__aeabi_uldivmod>
 80025c4:	4602      	mov	r2, r0
 80025c6:	460b      	mov	r3, r1
 80025c8:	4613      	mov	r3, r2
 80025ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80025cc:	e058      	b.n	8002680 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025ce:	4b38      	ldr	r3, [pc, #224]	@ (80026b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	099b      	lsrs	r3, r3, #6
 80025d4:	2200      	movs	r2, #0
 80025d6:	4618      	mov	r0, r3
 80025d8:	4611      	mov	r1, r2
 80025da:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80025de:	623b      	str	r3, [r7, #32]
 80025e0:	2300      	movs	r3, #0
 80025e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80025e4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80025e8:	4642      	mov	r2, r8
 80025ea:	464b      	mov	r3, r9
 80025ec:	f04f 0000 	mov.w	r0, #0
 80025f0:	f04f 0100 	mov.w	r1, #0
 80025f4:	0159      	lsls	r1, r3, #5
 80025f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025fa:	0150      	lsls	r0, r2, #5
 80025fc:	4602      	mov	r2, r0
 80025fe:	460b      	mov	r3, r1
 8002600:	4641      	mov	r1, r8
 8002602:	ebb2 0a01 	subs.w	sl, r2, r1
 8002606:	4649      	mov	r1, r9
 8002608:	eb63 0b01 	sbc.w	fp, r3, r1
 800260c:	f04f 0200 	mov.w	r2, #0
 8002610:	f04f 0300 	mov.w	r3, #0
 8002614:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002618:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800261c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002620:	ebb2 040a 	subs.w	r4, r2, sl
 8002624:	eb63 050b 	sbc.w	r5, r3, fp
 8002628:	f04f 0200 	mov.w	r2, #0
 800262c:	f04f 0300 	mov.w	r3, #0
 8002630:	00eb      	lsls	r3, r5, #3
 8002632:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002636:	00e2      	lsls	r2, r4, #3
 8002638:	4614      	mov	r4, r2
 800263a:	461d      	mov	r5, r3
 800263c:	4643      	mov	r3, r8
 800263e:	18e3      	adds	r3, r4, r3
 8002640:	603b      	str	r3, [r7, #0]
 8002642:	464b      	mov	r3, r9
 8002644:	eb45 0303 	adc.w	r3, r5, r3
 8002648:	607b      	str	r3, [r7, #4]
 800264a:	f04f 0200 	mov.w	r2, #0
 800264e:	f04f 0300 	mov.w	r3, #0
 8002652:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002656:	4629      	mov	r1, r5
 8002658:	028b      	lsls	r3, r1, #10
 800265a:	4621      	mov	r1, r4
 800265c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002660:	4621      	mov	r1, r4
 8002662:	028a      	lsls	r2, r1, #10
 8002664:	4610      	mov	r0, r2
 8002666:	4619      	mov	r1, r3
 8002668:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800266a:	2200      	movs	r2, #0
 800266c:	61bb      	str	r3, [r7, #24]
 800266e:	61fa      	str	r2, [r7, #28]
 8002670:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002674:	f7fd fde0 	bl	8000238 <__aeabi_uldivmod>
 8002678:	4602      	mov	r2, r0
 800267a:	460b      	mov	r3, r1
 800267c:	4613      	mov	r3, r2
 800267e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002680:	4b0b      	ldr	r3, [pc, #44]	@ (80026b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	0c1b      	lsrs	r3, r3, #16
 8002686:	f003 0303 	and.w	r3, r3, #3
 800268a:	3301      	adds	r3, #1
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002690:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002692:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002694:	fbb2 f3f3 	udiv	r3, r2, r3
 8002698:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800269a:	e002      	b.n	80026a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800269c:	4b05      	ldr	r3, [pc, #20]	@ (80026b4 <HAL_RCC_GetSysClockFreq+0x204>)
 800269e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80026a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3750      	adds	r7, #80	@ 0x50
 80026a8:	46bd      	mov	sp, r7
 80026aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026ae:	bf00      	nop
 80026b0:	40023800 	.word	0x40023800
 80026b4:	00f42400 	.word	0x00f42400
 80026b8:	007a1200 	.word	0x007a1200

080026bc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026c0:	4b03      	ldr	r3, [pc, #12]	@ (80026d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80026c2:	681b      	ldr	r3, [r3, #0]
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	20000000 	.word	0x20000000

080026d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80026d8:	f7ff fff0 	bl	80026bc <HAL_RCC_GetHCLKFreq>
 80026dc:	4602      	mov	r2, r0
 80026de:	4b05      	ldr	r3, [pc, #20]	@ (80026f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	0a9b      	lsrs	r3, r3, #10
 80026e4:	f003 0307 	and.w	r3, r3, #7
 80026e8:	4903      	ldr	r1, [pc, #12]	@ (80026f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026ea:	5ccb      	ldrb	r3, [r1, r3]
 80026ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	40023800 	.word	0x40023800
 80026f8:	08003f7c 	.word	0x08003f7c

080026fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002700:	f7ff ffdc 	bl	80026bc <HAL_RCC_GetHCLKFreq>
 8002704:	4602      	mov	r2, r0
 8002706:	4b05      	ldr	r3, [pc, #20]	@ (800271c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	0b5b      	lsrs	r3, r3, #13
 800270c:	f003 0307 	and.w	r3, r3, #7
 8002710:	4903      	ldr	r1, [pc, #12]	@ (8002720 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002712:	5ccb      	ldrb	r3, [r1, r3]
 8002714:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002718:	4618      	mov	r0, r3
 800271a:	bd80      	pop	{r7, pc}
 800271c:	40023800 	.word	0x40023800
 8002720:	08003f7c 	.word	0x08003f7c

08002724 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b088      	sub	sp, #32
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800272c:	2300      	movs	r3, #0
 800272e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002730:	2300      	movs	r3, #0
 8002732:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002734:	2300      	movs	r3, #0
 8002736:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002738:	2300      	movs	r3, #0
 800273a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800273c:	2300      	movs	r3, #0
 800273e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0301 	and.w	r3, r3, #1
 8002748:	2b00      	cmp	r3, #0
 800274a:	d012      	beq.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800274c:	4b69      	ldr	r3, [pc, #420]	@ (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	4a68      	ldr	r2, [pc, #416]	@ (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002752:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002756:	6093      	str	r3, [r2, #8]
 8002758:	4b66      	ldr	r3, [pc, #408]	@ (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800275a:	689a      	ldr	r2, [r3, #8]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002760:	4964      	ldr	r1, [pc, #400]	@ (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002762:	4313      	orrs	r3, r2
 8002764:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800276a:	2b00      	cmp	r3, #0
 800276c:	d101      	bne.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800276e:	2301      	movs	r3, #1
 8002770:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d017      	beq.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800277e:	4b5d      	ldr	r3, [pc, #372]	@ (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002780:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002784:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800278c:	4959      	ldr	r1, [pc, #356]	@ (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800278e:	4313      	orrs	r3, r2
 8002790:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002798:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800279c:	d101      	bne.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800279e:	2301      	movs	r3, #1
 80027a0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80027aa:	2301      	movs	r3, #1
 80027ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d017      	beq.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80027ba:	4b4e      	ldr	r3, [pc, #312]	@ (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80027c0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c8:	494a      	ldr	r1, [pc, #296]	@ (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027ca:	4313      	orrs	r3, r2
 80027cc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80027d8:	d101      	bne.n	80027de <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80027da:	2301      	movs	r3, #1
 80027dc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d101      	bne.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80027e6:	2301      	movs	r3, #1
 80027e8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80027f6:	2301      	movs	r3, #1
 80027f8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0320 	and.w	r3, r3, #32
 8002802:	2b00      	cmp	r3, #0
 8002804:	f000 808b 	beq.w	800291e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002808:	4b3a      	ldr	r3, [pc, #232]	@ (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800280a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800280c:	4a39      	ldr	r2, [pc, #228]	@ (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800280e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002812:	6413      	str	r3, [r2, #64]	@ 0x40
 8002814:	4b37      	ldr	r3, [pc, #220]	@ (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002818:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800281c:	60bb      	str	r3, [r7, #8]
 800281e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002820:	4b35      	ldr	r3, [pc, #212]	@ (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a34      	ldr	r2, [pc, #208]	@ (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002826:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800282a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800282c:	f7fe fae2 	bl	8000df4 <HAL_GetTick>
 8002830:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002832:	e008      	b.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002834:	f7fe fade 	bl	8000df4 <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	2b64      	cmp	r3, #100	@ 0x64
 8002840:	d901      	bls.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e38f      	b.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002846:	4b2c      	ldr	r3, [pc, #176]	@ (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800284e:	2b00      	cmp	r3, #0
 8002850:	d0f0      	beq.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002852:	4b28      	ldr	r3, [pc, #160]	@ (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002854:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002856:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800285a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d035      	beq.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002866:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800286a:	693a      	ldr	r2, [r7, #16]
 800286c:	429a      	cmp	r2, r3
 800286e:	d02e      	beq.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002870:	4b20      	ldr	r3, [pc, #128]	@ (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002872:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002874:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002878:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800287a:	4b1e      	ldr	r3, [pc, #120]	@ (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800287c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800287e:	4a1d      	ldr	r2, [pc, #116]	@ (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002880:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002884:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002886:	4b1b      	ldr	r3, [pc, #108]	@ (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002888:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800288a:	4a1a      	ldr	r2, [pc, #104]	@ (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800288c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002890:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002892:	4a18      	ldr	r2, [pc, #96]	@ (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002898:	4b16      	ldr	r3, [pc, #88]	@ (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800289a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800289c:	f003 0301 	and.w	r3, r3, #1
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d114      	bne.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a4:	f7fe faa6 	bl	8000df4 <HAL_GetTick>
 80028a8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028aa:	e00a      	b.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028ac:	f7fe faa2 	bl	8000df4 <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d901      	bls.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e351      	b.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028c2:	4b0c      	ldr	r3, [pc, #48]	@ (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028c6:	f003 0302 	and.w	r3, r3, #2
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d0ee      	beq.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80028da:	d111      	bne.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80028dc:	4b05      	ldr	r3, [pc, #20]	@ (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80028e8:	4b04      	ldr	r3, [pc, #16]	@ (80028fc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80028ea:	400b      	ands	r3, r1
 80028ec:	4901      	ldr	r1, [pc, #4]	@ (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	608b      	str	r3, [r1, #8]
 80028f2:	e00b      	b.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80028f4:	40023800 	.word	0x40023800
 80028f8:	40007000 	.word	0x40007000
 80028fc:	0ffffcff 	.word	0x0ffffcff
 8002900:	4bac      	ldr	r3, [pc, #688]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	4aab      	ldr	r2, [pc, #684]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002906:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800290a:	6093      	str	r3, [r2, #8]
 800290c:	4ba9      	ldr	r3, [pc, #676]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800290e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002914:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002918:	49a6      	ldr	r1, [pc, #664]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800291a:	4313      	orrs	r3, r2
 800291c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0310 	and.w	r3, r3, #16
 8002926:	2b00      	cmp	r3, #0
 8002928:	d010      	beq.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800292a:	4ba2      	ldr	r3, [pc, #648]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800292c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002930:	4aa0      	ldr	r2, [pc, #640]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002932:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002936:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800293a:	4b9e      	ldr	r3, [pc, #632]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800293c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002944:	499b      	ldr	r1, [pc, #620]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002946:	4313      	orrs	r3, r2
 8002948:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d00a      	beq.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002958:	4b96      	ldr	r3, [pc, #600]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800295a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800295e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002966:	4993      	ldr	r1, [pc, #588]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002968:	4313      	orrs	r3, r2
 800296a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d00a      	beq.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800297a:	4b8e      	ldr	r3, [pc, #568]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800297c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002980:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002988:	498a      	ldr	r1, [pc, #552]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800298a:	4313      	orrs	r3, r2
 800298c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002998:	2b00      	cmp	r3, #0
 800299a:	d00a      	beq.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800299c:	4b85      	ldr	r3, [pc, #532]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800299e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029a2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029aa:	4982      	ldr	r1, [pc, #520]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029ac:	4313      	orrs	r3, r2
 80029ae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d00a      	beq.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80029be:	4b7d      	ldr	r3, [pc, #500]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029c4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029cc:	4979      	ldr	r1, [pc, #484]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029ce:	4313      	orrs	r3, r2
 80029d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d00a      	beq.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80029e0:	4b74      	ldr	r3, [pc, #464]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029e6:	f023 0203 	bic.w	r2, r3, #3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029ee:	4971      	ldr	r1, [pc, #452]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d00a      	beq.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a02:	4b6c      	ldr	r3, [pc, #432]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a08:	f023 020c 	bic.w	r2, r3, #12
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a10:	4968      	ldr	r1, [pc, #416]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a12:	4313      	orrs	r3, r2
 8002a14:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d00a      	beq.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a24:	4b63      	ldr	r3, [pc, #396]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a2a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a32:	4960      	ldr	r1, [pc, #384]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d00a      	beq.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a46:	4b5b      	ldr	r3, [pc, #364]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a4c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a54:	4957      	ldr	r1, [pc, #348]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d00a      	beq.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002a68:	4b52      	ldr	r3, [pc, #328]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a6e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a76:	494f      	ldr	r1, [pc, #316]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d00a      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002a8a:	4b4a      	ldr	r3, [pc, #296]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a90:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a98:	4946      	ldr	r1, [pc, #280]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d00a      	beq.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002aac:	4b41      	ldr	r3, [pc, #260]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ab2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aba:	493e      	ldr	r1, [pc, #248]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002abc:	4313      	orrs	r3, r2
 8002abe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d00a      	beq.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002ace:	4b39      	ldr	r3, [pc, #228]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ad4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002adc:	4935      	ldr	r1, [pc, #212]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d00a      	beq.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002af0:	4b30      	ldr	r3, [pc, #192]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002af6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002afe:	492d      	ldr	r1, [pc, #180]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d011      	beq.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002b12:	4b28      	ldr	r3, [pc, #160]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b18:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002b20:	4924      	ldr	r1, [pc, #144]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b22:	4313      	orrs	r3, r2
 8002b24:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002b2c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002b30:	d101      	bne.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002b32:	2301      	movs	r3, #1
 8002b34:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0308 	and.w	r3, r3, #8
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d001      	beq.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002b42:	2301      	movs	r3, #1
 8002b44:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d00a      	beq.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b52:	4b18      	ldr	r3, [pc, #96]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b58:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b60:	4914      	ldr	r1, [pc, #80]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d00b      	beq.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002b74:	4b0f      	ldr	r3, [pc, #60]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b7a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b84:	490b      	ldr	r1, [pc, #44]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d00f      	beq.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002b98:	4b06      	ldr	r3, [pc, #24]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b9e:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ba8:	4902      	ldr	r1, [pc, #8]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002bb0:	e002      	b.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002bb2:	bf00      	nop
 8002bb4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d00b      	beq.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002bc4:	4b8a      	ldr	r3, [pc, #552]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002bca:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bd4:	4986      	ldr	r1, [pc, #536]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d00b      	beq.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002be8:	4b81      	ldr	r3, [pc, #516]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002bee:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002bf8:	497d      	ldr	r1, [pc, #500]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d006      	beq.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	f000 80d6 	beq.w	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002c14:	4b76      	ldr	r3, [pc, #472]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a75      	ldr	r2, [pc, #468]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c1a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002c1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c20:	f7fe f8e8 	bl	8000df4 <HAL_GetTick>
 8002c24:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002c26:	e008      	b.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002c28:	f7fe f8e4 	bl	8000df4 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b64      	cmp	r3, #100	@ 0x64
 8002c34:	d901      	bls.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e195      	b.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002c3a:	4b6d      	ldr	r3, [pc, #436]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d1f0      	bne.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d021      	beq.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d11d      	bne.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002c5a:	4b65      	ldr	r3, [pc, #404]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c60:	0c1b      	lsrs	r3, r3, #16
 8002c62:	f003 0303 	and.w	r3, r3, #3
 8002c66:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002c68:	4b61      	ldr	r3, [pc, #388]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c6e:	0e1b      	lsrs	r3, r3, #24
 8002c70:	f003 030f 	and.w	r3, r3, #15
 8002c74:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	019a      	lsls	r2, r3, #6
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	041b      	lsls	r3, r3, #16
 8002c80:	431a      	orrs	r2, r3
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	061b      	lsls	r3, r3, #24
 8002c86:	431a      	orrs	r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	071b      	lsls	r3, r3, #28
 8002c8e:	4958      	ldr	r1, [pc, #352]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c90:	4313      	orrs	r3, r2
 8002c92:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d004      	beq.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ca6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002caa:	d00a      	beq.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d02e      	beq.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cbc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002cc0:	d129      	bne.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002cc2:	4b4b      	ldr	r3, [pc, #300]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002cc8:	0c1b      	lsrs	r3, r3, #16
 8002cca:	f003 0303 	and.w	r3, r3, #3
 8002cce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002cd0:	4b47      	ldr	r3, [pc, #284]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002cd6:	0f1b      	lsrs	r3, r3, #28
 8002cd8:	f003 0307 	and.w	r3, r3, #7
 8002cdc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	019a      	lsls	r2, r3, #6
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	041b      	lsls	r3, r3, #16
 8002ce8:	431a      	orrs	r2, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	061b      	lsls	r3, r3, #24
 8002cf0:	431a      	orrs	r2, r3
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	071b      	lsls	r3, r3, #28
 8002cf6:	493e      	ldr	r1, [pc, #248]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002cfe:	4b3c      	ldr	r3, [pc, #240]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d04:	f023 021f 	bic.w	r2, r3, #31
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d0c:	3b01      	subs	r3, #1
 8002d0e:	4938      	ldr	r1, [pc, #224]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d10:	4313      	orrs	r3, r2
 8002d12:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d01d      	beq.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002d22:	4b33      	ldr	r3, [pc, #204]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d28:	0e1b      	lsrs	r3, r3, #24
 8002d2a:	f003 030f 	and.w	r3, r3, #15
 8002d2e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002d30:	4b2f      	ldr	r3, [pc, #188]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d32:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002d36:	0f1b      	lsrs	r3, r3, #28
 8002d38:	f003 0307 	and.w	r3, r3, #7
 8002d3c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	019a      	lsls	r2, r3, #6
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	691b      	ldr	r3, [r3, #16]
 8002d48:	041b      	lsls	r3, r3, #16
 8002d4a:	431a      	orrs	r2, r3
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	061b      	lsls	r3, r3, #24
 8002d50:	431a      	orrs	r2, r3
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	071b      	lsls	r3, r3, #28
 8002d56:	4926      	ldr	r1, [pc, #152]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d011      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	019a      	lsls	r2, r3, #6
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	691b      	ldr	r3, [r3, #16]
 8002d74:	041b      	lsls	r3, r3, #16
 8002d76:	431a      	orrs	r2, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	061b      	lsls	r3, r3, #24
 8002d7e:	431a      	orrs	r2, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	071b      	lsls	r3, r3, #28
 8002d86:	491a      	ldr	r1, [pc, #104]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002d8e:	4b18      	ldr	r3, [pc, #96]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a17      	ldr	r2, [pc, #92]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002d94:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002d98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d9a:	f7fe f82b 	bl	8000df4 <HAL_GetTick>
 8002d9e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002da0:	e008      	b.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002da2:	f7fe f827 	bl	8000df4 <HAL_GetTick>
 8002da6:	4602      	mov	r2, r0
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	2b64      	cmp	r3, #100	@ 0x64
 8002dae:	d901      	bls.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002db0:	2303      	movs	r3, #3
 8002db2:	e0d8      	b.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002db4:	4b0e      	ldr	r3, [pc, #56]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d0f0      	beq.n	8002da2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	f040 80ce 	bne.w	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002dc8:	4b09      	ldr	r3, [pc, #36]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a08      	ldr	r2, [pc, #32]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002dce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002dd2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dd4:	f7fe f80e 	bl	8000df4 <HAL_GetTick>
 8002dd8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002dda:	e00b      	b.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002ddc:	f7fe f80a 	bl	8000df4 <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	2b64      	cmp	r3, #100	@ 0x64
 8002de8:	d904      	bls.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e0bb      	b.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002dee:	bf00      	nop
 8002df0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002df4:	4b5e      	ldr	r3, [pc, #376]	@ (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002dfc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002e00:	d0ec      	beq.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d003      	beq.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d009      	beq.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d02e      	beq.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d12a      	bne.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002e2a:	4b51      	ldr	r3, [pc, #324]	@ (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e30:	0c1b      	lsrs	r3, r3, #16
 8002e32:	f003 0303 	and.w	r3, r3, #3
 8002e36:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002e38:	4b4d      	ldr	r3, [pc, #308]	@ (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e3e:	0f1b      	lsrs	r3, r3, #28
 8002e40:	f003 0307 	and.w	r3, r3, #7
 8002e44:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	695b      	ldr	r3, [r3, #20]
 8002e4a:	019a      	lsls	r2, r3, #6
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	041b      	lsls	r3, r3, #16
 8002e50:	431a      	orrs	r2, r3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	699b      	ldr	r3, [r3, #24]
 8002e56:	061b      	lsls	r3, r3, #24
 8002e58:	431a      	orrs	r2, r3
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	071b      	lsls	r3, r3, #28
 8002e5e:	4944      	ldr	r1, [pc, #272]	@ (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e60:	4313      	orrs	r3, r2
 8002e62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002e66:	4b42      	ldr	r3, [pc, #264]	@ (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002e6c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e74:	3b01      	subs	r3, #1
 8002e76:	021b      	lsls	r3, r3, #8
 8002e78:	493d      	ldr	r1, [pc, #244]	@ (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d022      	beq.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002e90:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002e94:	d11d      	bne.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002e96:	4b36      	ldr	r3, [pc, #216]	@ (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e9c:	0e1b      	lsrs	r3, r3, #24
 8002e9e:	f003 030f 	and.w	r3, r3, #15
 8002ea2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002ea4:	4b32      	ldr	r3, [pc, #200]	@ (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002eaa:	0f1b      	lsrs	r3, r3, #28
 8002eac:	f003 0307 	and.w	r3, r3, #7
 8002eb0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	695b      	ldr	r3, [r3, #20]
 8002eb6:	019a      	lsls	r2, r3, #6
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6a1b      	ldr	r3, [r3, #32]
 8002ebc:	041b      	lsls	r3, r3, #16
 8002ebe:	431a      	orrs	r2, r3
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	061b      	lsls	r3, r3, #24
 8002ec4:	431a      	orrs	r2, r3
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	071b      	lsls	r3, r3, #28
 8002eca:	4929      	ldr	r1, [pc, #164]	@ (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0308 	and.w	r3, r3, #8
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d028      	beq.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002ede:	4b24      	ldr	r3, [pc, #144]	@ (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ee4:	0e1b      	lsrs	r3, r3, #24
 8002ee6:	f003 030f 	and.w	r3, r3, #15
 8002eea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002eec:	4b20      	ldr	r3, [pc, #128]	@ (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ef2:	0c1b      	lsrs	r3, r3, #16
 8002ef4:	f003 0303 	and.w	r3, r3, #3
 8002ef8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	695b      	ldr	r3, [r3, #20]
 8002efe:	019a      	lsls	r2, r3, #6
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	041b      	lsls	r3, r3, #16
 8002f04:	431a      	orrs	r2, r3
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	061b      	lsls	r3, r3, #24
 8002f0a:	431a      	orrs	r2, r3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	69db      	ldr	r3, [r3, #28]
 8002f10:	071b      	lsls	r3, r3, #28
 8002f12:	4917      	ldr	r1, [pc, #92]	@ (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002f1a:	4b15      	ldr	r3, [pc, #84]	@ (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f20:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f28:	4911      	ldr	r1, [pc, #68]	@ (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002f30:	4b0f      	ldr	r3, [pc, #60]	@ (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a0e      	ldr	r2, [pc, #56]	@ (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f3c:	f7fd ff5a 	bl	8000df4 <HAL_GetTick>
 8002f40:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002f42:	e008      	b.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002f44:	f7fd ff56 	bl	8000df4 <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	2b64      	cmp	r3, #100	@ 0x64
 8002f50:	d901      	bls.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e007      	b.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002f56:	4b06      	ldr	r3, [pc, #24]	@ (8002f70 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002f5e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002f62:	d1ef      	bne.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002f64:	2300      	movs	r3, #0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3720      	adds	r7, #32
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	40023800 	.word	0x40023800

08002f74 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d101      	bne.n	8002f86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e040      	b.n	8003008 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d106      	bne.n	8002f9c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f7fd fd96 	bl	8000ac8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2224      	movs	r2, #36	@ 0x24
 8002fa0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f022 0201 	bic.w	r2, r2, #1
 8002fb0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d002      	beq.n	8002fc0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f000 fa8c 	bl	80034d8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f000 f825 	bl	8003010 <UART_SetConfig>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d101      	bne.n	8002fd0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e01b      	b.n	8003008 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	685a      	ldr	r2, [r3, #4]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002fde:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	689a      	ldr	r2, [r3, #8]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002fee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f042 0201 	orr.w	r2, r2, #1
 8002ffe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f000 fb0b 	bl	800361c <UART_CheckIdleState>
 8003006:	4603      	mov	r3, r0
}
 8003008:	4618      	mov	r0, r3
 800300a:	3708      	adds	r7, #8
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}

08003010 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b088      	sub	sp, #32
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003018:	2300      	movs	r3, #0
 800301a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	689a      	ldr	r2, [r3, #8]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	691b      	ldr	r3, [r3, #16]
 8003024:	431a      	orrs	r2, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	695b      	ldr	r3, [r3, #20]
 800302a:	431a      	orrs	r2, r3
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	69db      	ldr	r3, [r3, #28]
 8003030:	4313      	orrs	r3, r2
 8003032:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	4ba6      	ldr	r3, [pc, #664]	@ (80032d4 <UART_SetConfig+0x2c4>)
 800303c:	4013      	ands	r3, r2
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	6812      	ldr	r2, [r2, #0]
 8003042:	6979      	ldr	r1, [r7, #20]
 8003044:	430b      	orrs	r3, r1
 8003046:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	68da      	ldr	r2, [r3, #12]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	430a      	orrs	r2, r1
 800305c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	699b      	ldr	r3, [r3, #24]
 8003062:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6a1b      	ldr	r3, [r3, #32]
 8003068:	697a      	ldr	r2, [r7, #20]
 800306a:	4313      	orrs	r3, r2
 800306c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	697a      	ldr	r2, [r7, #20]
 800307e:	430a      	orrs	r2, r1
 8003080:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a94      	ldr	r2, [pc, #592]	@ (80032d8 <UART_SetConfig+0x2c8>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d120      	bne.n	80030ce <UART_SetConfig+0xbe>
 800308c:	4b93      	ldr	r3, [pc, #588]	@ (80032dc <UART_SetConfig+0x2cc>)
 800308e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003092:	f003 0303 	and.w	r3, r3, #3
 8003096:	2b03      	cmp	r3, #3
 8003098:	d816      	bhi.n	80030c8 <UART_SetConfig+0xb8>
 800309a:	a201      	add	r2, pc, #4	@ (adr r2, 80030a0 <UART_SetConfig+0x90>)
 800309c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030a0:	080030b1 	.word	0x080030b1
 80030a4:	080030bd 	.word	0x080030bd
 80030a8:	080030b7 	.word	0x080030b7
 80030ac:	080030c3 	.word	0x080030c3
 80030b0:	2301      	movs	r3, #1
 80030b2:	77fb      	strb	r3, [r7, #31]
 80030b4:	e150      	b.n	8003358 <UART_SetConfig+0x348>
 80030b6:	2302      	movs	r3, #2
 80030b8:	77fb      	strb	r3, [r7, #31]
 80030ba:	e14d      	b.n	8003358 <UART_SetConfig+0x348>
 80030bc:	2304      	movs	r3, #4
 80030be:	77fb      	strb	r3, [r7, #31]
 80030c0:	e14a      	b.n	8003358 <UART_SetConfig+0x348>
 80030c2:	2308      	movs	r3, #8
 80030c4:	77fb      	strb	r3, [r7, #31]
 80030c6:	e147      	b.n	8003358 <UART_SetConfig+0x348>
 80030c8:	2310      	movs	r3, #16
 80030ca:	77fb      	strb	r3, [r7, #31]
 80030cc:	e144      	b.n	8003358 <UART_SetConfig+0x348>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a83      	ldr	r2, [pc, #524]	@ (80032e0 <UART_SetConfig+0x2d0>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d132      	bne.n	800313e <UART_SetConfig+0x12e>
 80030d8:	4b80      	ldr	r3, [pc, #512]	@ (80032dc <UART_SetConfig+0x2cc>)
 80030da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030de:	f003 030c 	and.w	r3, r3, #12
 80030e2:	2b0c      	cmp	r3, #12
 80030e4:	d828      	bhi.n	8003138 <UART_SetConfig+0x128>
 80030e6:	a201      	add	r2, pc, #4	@ (adr r2, 80030ec <UART_SetConfig+0xdc>)
 80030e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ec:	08003121 	.word	0x08003121
 80030f0:	08003139 	.word	0x08003139
 80030f4:	08003139 	.word	0x08003139
 80030f8:	08003139 	.word	0x08003139
 80030fc:	0800312d 	.word	0x0800312d
 8003100:	08003139 	.word	0x08003139
 8003104:	08003139 	.word	0x08003139
 8003108:	08003139 	.word	0x08003139
 800310c:	08003127 	.word	0x08003127
 8003110:	08003139 	.word	0x08003139
 8003114:	08003139 	.word	0x08003139
 8003118:	08003139 	.word	0x08003139
 800311c:	08003133 	.word	0x08003133
 8003120:	2300      	movs	r3, #0
 8003122:	77fb      	strb	r3, [r7, #31]
 8003124:	e118      	b.n	8003358 <UART_SetConfig+0x348>
 8003126:	2302      	movs	r3, #2
 8003128:	77fb      	strb	r3, [r7, #31]
 800312a:	e115      	b.n	8003358 <UART_SetConfig+0x348>
 800312c:	2304      	movs	r3, #4
 800312e:	77fb      	strb	r3, [r7, #31]
 8003130:	e112      	b.n	8003358 <UART_SetConfig+0x348>
 8003132:	2308      	movs	r3, #8
 8003134:	77fb      	strb	r3, [r7, #31]
 8003136:	e10f      	b.n	8003358 <UART_SetConfig+0x348>
 8003138:	2310      	movs	r3, #16
 800313a:	77fb      	strb	r3, [r7, #31]
 800313c:	e10c      	b.n	8003358 <UART_SetConfig+0x348>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a68      	ldr	r2, [pc, #416]	@ (80032e4 <UART_SetConfig+0x2d4>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d120      	bne.n	800318a <UART_SetConfig+0x17a>
 8003148:	4b64      	ldr	r3, [pc, #400]	@ (80032dc <UART_SetConfig+0x2cc>)
 800314a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800314e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003152:	2b30      	cmp	r3, #48	@ 0x30
 8003154:	d013      	beq.n	800317e <UART_SetConfig+0x16e>
 8003156:	2b30      	cmp	r3, #48	@ 0x30
 8003158:	d814      	bhi.n	8003184 <UART_SetConfig+0x174>
 800315a:	2b20      	cmp	r3, #32
 800315c:	d009      	beq.n	8003172 <UART_SetConfig+0x162>
 800315e:	2b20      	cmp	r3, #32
 8003160:	d810      	bhi.n	8003184 <UART_SetConfig+0x174>
 8003162:	2b00      	cmp	r3, #0
 8003164:	d002      	beq.n	800316c <UART_SetConfig+0x15c>
 8003166:	2b10      	cmp	r3, #16
 8003168:	d006      	beq.n	8003178 <UART_SetConfig+0x168>
 800316a:	e00b      	b.n	8003184 <UART_SetConfig+0x174>
 800316c:	2300      	movs	r3, #0
 800316e:	77fb      	strb	r3, [r7, #31]
 8003170:	e0f2      	b.n	8003358 <UART_SetConfig+0x348>
 8003172:	2302      	movs	r3, #2
 8003174:	77fb      	strb	r3, [r7, #31]
 8003176:	e0ef      	b.n	8003358 <UART_SetConfig+0x348>
 8003178:	2304      	movs	r3, #4
 800317a:	77fb      	strb	r3, [r7, #31]
 800317c:	e0ec      	b.n	8003358 <UART_SetConfig+0x348>
 800317e:	2308      	movs	r3, #8
 8003180:	77fb      	strb	r3, [r7, #31]
 8003182:	e0e9      	b.n	8003358 <UART_SetConfig+0x348>
 8003184:	2310      	movs	r3, #16
 8003186:	77fb      	strb	r3, [r7, #31]
 8003188:	e0e6      	b.n	8003358 <UART_SetConfig+0x348>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a56      	ldr	r2, [pc, #344]	@ (80032e8 <UART_SetConfig+0x2d8>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d120      	bne.n	80031d6 <UART_SetConfig+0x1c6>
 8003194:	4b51      	ldr	r3, [pc, #324]	@ (80032dc <UART_SetConfig+0x2cc>)
 8003196:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800319a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800319e:	2bc0      	cmp	r3, #192	@ 0xc0
 80031a0:	d013      	beq.n	80031ca <UART_SetConfig+0x1ba>
 80031a2:	2bc0      	cmp	r3, #192	@ 0xc0
 80031a4:	d814      	bhi.n	80031d0 <UART_SetConfig+0x1c0>
 80031a6:	2b80      	cmp	r3, #128	@ 0x80
 80031a8:	d009      	beq.n	80031be <UART_SetConfig+0x1ae>
 80031aa:	2b80      	cmp	r3, #128	@ 0x80
 80031ac:	d810      	bhi.n	80031d0 <UART_SetConfig+0x1c0>
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d002      	beq.n	80031b8 <UART_SetConfig+0x1a8>
 80031b2:	2b40      	cmp	r3, #64	@ 0x40
 80031b4:	d006      	beq.n	80031c4 <UART_SetConfig+0x1b4>
 80031b6:	e00b      	b.n	80031d0 <UART_SetConfig+0x1c0>
 80031b8:	2300      	movs	r3, #0
 80031ba:	77fb      	strb	r3, [r7, #31]
 80031bc:	e0cc      	b.n	8003358 <UART_SetConfig+0x348>
 80031be:	2302      	movs	r3, #2
 80031c0:	77fb      	strb	r3, [r7, #31]
 80031c2:	e0c9      	b.n	8003358 <UART_SetConfig+0x348>
 80031c4:	2304      	movs	r3, #4
 80031c6:	77fb      	strb	r3, [r7, #31]
 80031c8:	e0c6      	b.n	8003358 <UART_SetConfig+0x348>
 80031ca:	2308      	movs	r3, #8
 80031cc:	77fb      	strb	r3, [r7, #31]
 80031ce:	e0c3      	b.n	8003358 <UART_SetConfig+0x348>
 80031d0:	2310      	movs	r3, #16
 80031d2:	77fb      	strb	r3, [r7, #31]
 80031d4:	e0c0      	b.n	8003358 <UART_SetConfig+0x348>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a44      	ldr	r2, [pc, #272]	@ (80032ec <UART_SetConfig+0x2dc>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d125      	bne.n	800322c <UART_SetConfig+0x21c>
 80031e0:	4b3e      	ldr	r3, [pc, #248]	@ (80032dc <UART_SetConfig+0x2cc>)
 80031e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80031ee:	d017      	beq.n	8003220 <UART_SetConfig+0x210>
 80031f0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80031f4:	d817      	bhi.n	8003226 <UART_SetConfig+0x216>
 80031f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031fa:	d00b      	beq.n	8003214 <UART_SetConfig+0x204>
 80031fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003200:	d811      	bhi.n	8003226 <UART_SetConfig+0x216>
 8003202:	2b00      	cmp	r3, #0
 8003204:	d003      	beq.n	800320e <UART_SetConfig+0x1fe>
 8003206:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800320a:	d006      	beq.n	800321a <UART_SetConfig+0x20a>
 800320c:	e00b      	b.n	8003226 <UART_SetConfig+0x216>
 800320e:	2300      	movs	r3, #0
 8003210:	77fb      	strb	r3, [r7, #31]
 8003212:	e0a1      	b.n	8003358 <UART_SetConfig+0x348>
 8003214:	2302      	movs	r3, #2
 8003216:	77fb      	strb	r3, [r7, #31]
 8003218:	e09e      	b.n	8003358 <UART_SetConfig+0x348>
 800321a:	2304      	movs	r3, #4
 800321c:	77fb      	strb	r3, [r7, #31]
 800321e:	e09b      	b.n	8003358 <UART_SetConfig+0x348>
 8003220:	2308      	movs	r3, #8
 8003222:	77fb      	strb	r3, [r7, #31]
 8003224:	e098      	b.n	8003358 <UART_SetConfig+0x348>
 8003226:	2310      	movs	r3, #16
 8003228:	77fb      	strb	r3, [r7, #31]
 800322a:	e095      	b.n	8003358 <UART_SetConfig+0x348>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a2f      	ldr	r2, [pc, #188]	@ (80032f0 <UART_SetConfig+0x2e0>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d125      	bne.n	8003282 <UART_SetConfig+0x272>
 8003236:	4b29      	ldr	r3, [pc, #164]	@ (80032dc <UART_SetConfig+0x2cc>)
 8003238:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800323c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003240:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003244:	d017      	beq.n	8003276 <UART_SetConfig+0x266>
 8003246:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800324a:	d817      	bhi.n	800327c <UART_SetConfig+0x26c>
 800324c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003250:	d00b      	beq.n	800326a <UART_SetConfig+0x25a>
 8003252:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003256:	d811      	bhi.n	800327c <UART_SetConfig+0x26c>
 8003258:	2b00      	cmp	r3, #0
 800325a:	d003      	beq.n	8003264 <UART_SetConfig+0x254>
 800325c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003260:	d006      	beq.n	8003270 <UART_SetConfig+0x260>
 8003262:	e00b      	b.n	800327c <UART_SetConfig+0x26c>
 8003264:	2301      	movs	r3, #1
 8003266:	77fb      	strb	r3, [r7, #31]
 8003268:	e076      	b.n	8003358 <UART_SetConfig+0x348>
 800326a:	2302      	movs	r3, #2
 800326c:	77fb      	strb	r3, [r7, #31]
 800326e:	e073      	b.n	8003358 <UART_SetConfig+0x348>
 8003270:	2304      	movs	r3, #4
 8003272:	77fb      	strb	r3, [r7, #31]
 8003274:	e070      	b.n	8003358 <UART_SetConfig+0x348>
 8003276:	2308      	movs	r3, #8
 8003278:	77fb      	strb	r3, [r7, #31]
 800327a:	e06d      	b.n	8003358 <UART_SetConfig+0x348>
 800327c:	2310      	movs	r3, #16
 800327e:	77fb      	strb	r3, [r7, #31]
 8003280:	e06a      	b.n	8003358 <UART_SetConfig+0x348>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a1b      	ldr	r2, [pc, #108]	@ (80032f4 <UART_SetConfig+0x2e4>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d138      	bne.n	80032fe <UART_SetConfig+0x2ee>
 800328c:	4b13      	ldr	r3, [pc, #76]	@ (80032dc <UART_SetConfig+0x2cc>)
 800328e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003292:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003296:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800329a:	d017      	beq.n	80032cc <UART_SetConfig+0x2bc>
 800329c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80032a0:	d82a      	bhi.n	80032f8 <UART_SetConfig+0x2e8>
 80032a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80032a6:	d00b      	beq.n	80032c0 <UART_SetConfig+0x2b0>
 80032a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80032ac:	d824      	bhi.n	80032f8 <UART_SetConfig+0x2e8>
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d003      	beq.n	80032ba <UART_SetConfig+0x2aa>
 80032b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032b6:	d006      	beq.n	80032c6 <UART_SetConfig+0x2b6>
 80032b8:	e01e      	b.n	80032f8 <UART_SetConfig+0x2e8>
 80032ba:	2300      	movs	r3, #0
 80032bc:	77fb      	strb	r3, [r7, #31]
 80032be:	e04b      	b.n	8003358 <UART_SetConfig+0x348>
 80032c0:	2302      	movs	r3, #2
 80032c2:	77fb      	strb	r3, [r7, #31]
 80032c4:	e048      	b.n	8003358 <UART_SetConfig+0x348>
 80032c6:	2304      	movs	r3, #4
 80032c8:	77fb      	strb	r3, [r7, #31]
 80032ca:	e045      	b.n	8003358 <UART_SetConfig+0x348>
 80032cc:	2308      	movs	r3, #8
 80032ce:	77fb      	strb	r3, [r7, #31]
 80032d0:	e042      	b.n	8003358 <UART_SetConfig+0x348>
 80032d2:	bf00      	nop
 80032d4:	efff69f3 	.word	0xefff69f3
 80032d8:	40011000 	.word	0x40011000
 80032dc:	40023800 	.word	0x40023800
 80032e0:	40004400 	.word	0x40004400
 80032e4:	40004800 	.word	0x40004800
 80032e8:	40004c00 	.word	0x40004c00
 80032ec:	40005000 	.word	0x40005000
 80032f0:	40011400 	.word	0x40011400
 80032f4:	40007800 	.word	0x40007800
 80032f8:	2310      	movs	r3, #16
 80032fa:	77fb      	strb	r3, [r7, #31]
 80032fc:	e02c      	b.n	8003358 <UART_SetConfig+0x348>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a72      	ldr	r2, [pc, #456]	@ (80034cc <UART_SetConfig+0x4bc>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d125      	bne.n	8003354 <UART_SetConfig+0x344>
 8003308:	4b71      	ldr	r3, [pc, #452]	@ (80034d0 <UART_SetConfig+0x4c0>)
 800330a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800330e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003312:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003316:	d017      	beq.n	8003348 <UART_SetConfig+0x338>
 8003318:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800331c:	d817      	bhi.n	800334e <UART_SetConfig+0x33e>
 800331e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003322:	d00b      	beq.n	800333c <UART_SetConfig+0x32c>
 8003324:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003328:	d811      	bhi.n	800334e <UART_SetConfig+0x33e>
 800332a:	2b00      	cmp	r3, #0
 800332c:	d003      	beq.n	8003336 <UART_SetConfig+0x326>
 800332e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003332:	d006      	beq.n	8003342 <UART_SetConfig+0x332>
 8003334:	e00b      	b.n	800334e <UART_SetConfig+0x33e>
 8003336:	2300      	movs	r3, #0
 8003338:	77fb      	strb	r3, [r7, #31]
 800333a:	e00d      	b.n	8003358 <UART_SetConfig+0x348>
 800333c:	2302      	movs	r3, #2
 800333e:	77fb      	strb	r3, [r7, #31]
 8003340:	e00a      	b.n	8003358 <UART_SetConfig+0x348>
 8003342:	2304      	movs	r3, #4
 8003344:	77fb      	strb	r3, [r7, #31]
 8003346:	e007      	b.n	8003358 <UART_SetConfig+0x348>
 8003348:	2308      	movs	r3, #8
 800334a:	77fb      	strb	r3, [r7, #31]
 800334c:	e004      	b.n	8003358 <UART_SetConfig+0x348>
 800334e:	2310      	movs	r3, #16
 8003350:	77fb      	strb	r3, [r7, #31]
 8003352:	e001      	b.n	8003358 <UART_SetConfig+0x348>
 8003354:	2310      	movs	r3, #16
 8003356:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	69db      	ldr	r3, [r3, #28]
 800335c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003360:	d15b      	bne.n	800341a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003362:	7ffb      	ldrb	r3, [r7, #31]
 8003364:	2b08      	cmp	r3, #8
 8003366:	d828      	bhi.n	80033ba <UART_SetConfig+0x3aa>
 8003368:	a201      	add	r2, pc, #4	@ (adr r2, 8003370 <UART_SetConfig+0x360>)
 800336a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800336e:	bf00      	nop
 8003370:	08003395 	.word	0x08003395
 8003374:	0800339d 	.word	0x0800339d
 8003378:	080033a5 	.word	0x080033a5
 800337c:	080033bb 	.word	0x080033bb
 8003380:	080033ab 	.word	0x080033ab
 8003384:	080033bb 	.word	0x080033bb
 8003388:	080033bb 	.word	0x080033bb
 800338c:	080033bb 	.word	0x080033bb
 8003390:	080033b3 	.word	0x080033b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003394:	f7ff f99e 	bl	80026d4 <HAL_RCC_GetPCLK1Freq>
 8003398:	61b8      	str	r0, [r7, #24]
        break;
 800339a:	e013      	b.n	80033c4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800339c:	f7ff f9ae 	bl	80026fc <HAL_RCC_GetPCLK2Freq>
 80033a0:	61b8      	str	r0, [r7, #24]
        break;
 80033a2:	e00f      	b.n	80033c4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033a4:	4b4b      	ldr	r3, [pc, #300]	@ (80034d4 <UART_SetConfig+0x4c4>)
 80033a6:	61bb      	str	r3, [r7, #24]
        break;
 80033a8:	e00c      	b.n	80033c4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033aa:	f7ff f881 	bl	80024b0 <HAL_RCC_GetSysClockFreq>
 80033ae:	61b8      	str	r0, [r7, #24]
        break;
 80033b0:	e008      	b.n	80033c4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80033b6:	61bb      	str	r3, [r7, #24]
        break;
 80033b8:	e004      	b.n	80033c4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80033ba:	2300      	movs	r3, #0
 80033bc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	77bb      	strb	r3, [r7, #30]
        break;
 80033c2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d074      	beq.n	80034b4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80033ca:	69bb      	ldr	r3, [r7, #24]
 80033cc:	005a      	lsls	r2, r3, #1
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	085b      	lsrs	r3, r3, #1
 80033d4:	441a      	add	r2, r3
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	fbb2 f3f3 	udiv	r3, r2, r3
 80033de:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	2b0f      	cmp	r3, #15
 80033e4:	d916      	bls.n	8003414 <UART_SetConfig+0x404>
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033ec:	d212      	bcs.n	8003414 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	f023 030f 	bic.w	r3, r3, #15
 80033f6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	085b      	lsrs	r3, r3, #1
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	f003 0307 	and.w	r3, r3, #7
 8003402:	b29a      	uxth	r2, r3
 8003404:	89fb      	ldrh	r3, [r7, #14]
 8003406:	4313      	orrs	r3, r2
 8003408:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	89fa      	ldrh	r2, [r7, #14]
 8003410:	60da      	str	r2, [r3, #12]
 8003412:	e04f      	b.n	80034b4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	77bb      	strb	r3, [r7, #30]
 8003418:	e04c      	b.n	80034b4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800341a:	7ffb      	ldrb	r3, [r7, #31]
 800341c:	2b08      	cmp	r3, #8
 800341e:	d828      	bhi.n	8003472 <UART_SetConfig+0x462>
 8003420:	a201      	add	r2, pc, #4	@ (adr r2, 8003428 <UART_SetConfig+0x418>)
 8003422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003426:	bf00      	nop
 8003428:	0800344d 	.word	0x0800344d
 800342c:	08003455 	.word	0x08003455
 8003430:	0800345d 	.word	0x0800345d
 8003434:	08003473 	.word	0x08003473
 8003438:	08003463 	.word	0x08003463
 800343c:	08003473 	.word	0x08003473
 8003440:	08003473 	.word	0x08003473
 8003444:	08003473 	.word	0x08003473
 8003448:	0800346b 	.word	0x0800346b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800344c:	f7ff f942 	bl	80026d4 <HAL_RCC_GetPCLK1Freq>
 8003450:	61b8      	str	r0, [r7, #24]
        break;
 8003452:	e013      	b.n	800347c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003454:	f7ff f952 	bl	80026fc <HAL_RCC_GetPCLK2Freq>
 8003458:	61b8      	str	r0, [r7, #24]
        break;
 800345a:	e00f      	b.n	800347c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800345c:	4b1d      	ldr	r3, [pc, #116]	@ (80034d4 <UART_SetConfig+0x4c4>)
 800345e:	61bb      	str	r3, [r7, #24]
        break;
 8003460:	e00c      	b.n	800347c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003462:	f7ff f825 	bl	80024b0 <HAL_RCC_GetSysClockFreq>
 8003466:	61b8      	str	r0, [r7, #24]
        break;
 8003468:	e008      	b.n	800347c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800346a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800346e:	61bb      	str	r3, [r7, #24]
        break;
 8003470:	e004      	b.n	800347c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003472:	2300      	movs	r3, #0
 8003474:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	77bb      	strb	r3, [r7, #30]
        break;
 800347a:	bf00      	nop
    }

    if (pclk != 0U)
 800347c:	69bb      	ldr	r3, [r7, #24]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d018      	beq.n	80034b4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	085a      	lsrs	r2, r3, #1
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	441a      	add	r2, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	fbb2 f3f3 	udiv	r3, r2, r3
 8003494:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	2b0f      	cmp	r3, #15
 800349a:	d909      	bls.n	80034b0 <UART_SetConfig+0x4a0>
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034a2:	d205      	bcs.n	80034b0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	b29a      	uxth	r2, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	60da      	str	r2, [r3, #12]
 80034ae:	e001      	b.n	80034b4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80034c0:	7fbb      	ldrb	r3, [r7, #30]
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3720      	adds	r7, #32
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	40007c00 	.word	0x40007c00
 80034d0:	40023800 	.word	0x40023800
 80034d4:	00f42400 	.word	0x00f42400

080034d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034e4:	f003 0308 	and.w	r3, r3, #8
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d00a      	beq.n	8003502 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	430a      	orrs	r2, r1
 8003500:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003506:	f003 0301 	and.w	r3, r3, #1
 800350a:	2b00      	cmp	r3, #0
 800350c:	d00a      	beq.n	8003524 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	430a      	orrs	r2, r1
 8003522:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003528:	f003 0302 	and.w	r3, r3, #2
 800352c:	2b00      	cmp	r3, #0
 800352e:	d00a      	beq.n	8003546 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	430a      	orrs	r2, r1
 8003544:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800354a:	f003 0304 	and.w	r3, r3, #4
 800354e:	2b00      	cmp	r3, #0
 8003550:	d00a      	beq.n	8003568 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	430a      	orrs	r2, r1
 8003566:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800356c:	f003 0310 	and.w	r3, r3, #16
 8003570:	2b00      	cmp	r3, #0
 8003572:	d00a      	beq.n	800358a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	430a      	orrs	r2, r1
 8003588:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800358e:	f003 0320 	and.w	r3, r3, #32
 8003592:	2b00      	cmp	r3, #0
 8003594:	d00a      	beq.n	80035ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	430a      	orrs	r2, r1
 80035aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d01a      	beq.n	80035ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	430a      	orrs	r2, r1
 80035cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80035d6:	d10a      	bne.n	80035ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	430a      	orrs	r2, r1
 80035ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d00a      	beq.n	8003610 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	430a      	orrs	r2, r1
 800360e:	605a      	str	r2, [r3, #4]
  }
}
 8003610:	bf00      	nop
 8003612:	370c      	adds	r7, #12
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr

0800361c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b098      	sub	sp, #96	@ 0x60
 8003620:	af02      	add	r7, sp, #8
 8003622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800362c:	f7fd fbe2 	bl	8000df4 <HAL_GetTick>
 8003630:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0308 	and.w	r3, r3, #8
 800363c:	2b08      	cmp	r3, #8
 800363e:	d12e      	bne.n	800369e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003640:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003644:	9300      	str	r3, [sp, #0]
 8003646:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003648:	2200      	movs	r2, #0
 800364a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f000 f88c 	bl	800376c <UART_WaitOnFlagUntilTimeout>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d021      	beq.n	800369e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003660:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003662:	e853 3f00 	ldrex	r3, [r3]
 8003666:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003668:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800366a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800366e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	461a      	mov	r2, r3
 8003676:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003678:	647b      	str	r3, [r7, #68]	@ 0x44
 800367a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800367c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800367e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003680:	e841 2300 	strex	r3, r2, [r1]
 8003684:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003686:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003688:	2b00      	cmp	r3, #0
 800368a:	d1e6      	bne.n	800365a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2220      	movs	r2, #32
 8003690:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e062      	b.n	8003764 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0304 	and.w	r3, r3, #4
 80036a8:	2b04      	cmp	r3, #4
 80036aa:	d149      	bne.n	8003740 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036ac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80036b0:	9300      	str	r3, [sp, #0]
 80036b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036b4:	2200      	movs	r2, #0
 80036b6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f000 f856 	bl	800376c <UART_WaitOnFlagUntilTimeout>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d03c      	beq.n	8003740 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ce:	e853 3f00 	ldrex	r3, [r3]
 80036d2:	623b      	str	r3, [r7, #32]
   return(result);
 80036d4:	6a3b      	ldr	r3, [r7, #32]
 80036d6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80036da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	461a      	mov	r2, r3
 80036e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80036e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80036e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036e8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80036ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036ec:	e841 2300 	strex	r3, r2, [r1]
 80036f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80036f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d1e6      	bne.n	80036c6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	3308      	adds	r3, #8
 80036fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	e853 3f00 	ldrex	r3, [r3]
 8003706:	60fb      	str	r3, [r7, #12]
   return(result);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f023 0301 	bic.w	r3, r3, #1
 800370e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	3308      	adds	r3, #8
 8003716:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003718:	61fa      	str	r2, [r7, #28]
 800371a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800371c:	69b9      	ldr	r1, [r7, #24]
 800371e:	69fa      	ldr	r2, [r7, #28]
 8003720:	e841 2300 	strex	r3, r2, [r1]
 8003724:	617b      	str	r3, [r7, #20]
   return(result);
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d1e5      	bne.n	80036f8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2220      	movs	r2, #32
 8003730:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800373c:	2303      	movs	r3, #3
 800373e:	e011      	b.n	8003764 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2220      	movs	r2, #32
 8003744:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2220      	movs	r2, #32
 800374a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003762:	2300      	movs	r3, #0
}
 8003764:	4618      	mov	r0, r3
 8003766:	3758      	adds	r7, #88	@ 0x58
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	60b9      	str	r1, [r7, #8]
 8003776:	603b      	str	r3, [r7, #0]
 8003778:	4613      	mov	r3, r2
 800377a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800377c:	e04f      	b.n	800381e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800377e:	69bb      	ldr	r3, [r7, #24]
 8003780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003784:	d04b      	beq.n	800381e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003786:	f7fd fb35 	bl	8000df4 <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	69ba      	ldr	r2, [r7, #24]
 8003792:	429a      	cmp	r2, r3
 8003794:	d302      	bcc.n	800379c <UART_WaitOnFlagUntilTimeout+0x30>
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d101      	bne.n	80037a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	e04e      	b.n	800383e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0304 	and.w	r3, r3, #4
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d037      	beq.n	800381e <UART_WaitOnFlagUntilTimeout+0xb2>
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	2b80      	cmp	r3, #128	@ 0x80
 80037b2:	d034      	beq.n	800381e <UART_WaitOnFlagUntilTimeout+0xb2>
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	2b40      	cmp	r3, #64	@ 0x40
 80037b8:	d031      	beq.n	800381e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	69db      	ldr	r3, [r3, #28]
 80037c0:	f003 0308 	and.w	r3, r3, #8
 80037c4:	2b08      	cmp	r3, #8
 80037c6:	d110      	bne.n	80037ea <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2208      	movs	r2, #8
 80037ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80037d0:	68f8      	ldr	r0, [r7, #12]
 80037d2:	f000 f838 	bl	8003846 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2208      	movs	r2, #8
 80037da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e029      	b.n	800383e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	69db      	ldr	r3, [r3, #28]
 80037f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80037f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80037f8:	d111      	bne.n	800381e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003802:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003804:	68f8      	ldr	r0, [r7, #12]
 8003806:	f000 f81e 	bl	8003846 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2220      	movs	r2, #32
 800380e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2200      	movs	r2, #0
 8003816:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e00f      	b.n	800383e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	69da      	ldr	r2, [r3, #28]
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	4013      	ands	r3, r2
 8003828:	68ba      	ldr	r2, [r7, #8]
 800382a:	429a      	cmp	r2, r3
 800382c:	bf0c      	ite	eq
 800382e:	2301      	moveq	r3, #1
 8003830:	2300      	movne	r3, #0
 8003832:	b2db      	uxtb	r3, r3
 8003834:	461a      	mov	r2, r3
 8003836:	79fb      	ldrb	r3, [r7, #7]
 8003838:	429a      	cmp	r2, r3
 800383a:	d0a0      	beq.n	800377e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800383c:	2300      	movs	r3, #0
}
 800383e:	4618      	mov	r0, r3
 8003840:	3710      	adds	r7, #16
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}

08003846 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003846:	b480      	push	{r7}
 8003848:	b095      	sub	sp, #84	@ 0x54
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003854:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003856:	e853 3f00 	ldrex	r3, [r3]
 800385a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800385c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800385e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003862:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	461a      	mov	r2, r3
 800386a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800386c:	643b      	str	r3, [r7, #64]	@ 0x40
 800386e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003870:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003872:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003874:	e841 2300 	strex	r3, r2, [r1]
 8003878:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800387a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800387c:	2b00      	cmp	r3, #0
 800387e:	d1e6      	bne.n	800384e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	3308      	adds	r3, #8
 8003886:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003888:	6a3b      	ldr	r3, [r7, #32]
 800388a:	e853 3f00 	ldrex	r3, [r3]
 800388e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	f023 0301 	bic.w	r3, r3, #1
 8003896:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	3308      	adds	r3, #8
 800389e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80038a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80038a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80038a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80038a8:	e841 2300 	strex	r3, r2, [r1]
 80038ac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80038ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d1e5      	bne.n	8003880 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d118      	bne.n	80038ee <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	e853 3f00 	ldrex	r3, [r3]
 80038c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	f023 0310 	bic.w	r3, r3, #16
 80038d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	461a      	mov	r2, r3
 80038d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038da:	61bb      	str	r3, [r7, #24]
 80038dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038de:	6979      	ldr	r1, [r7, #20]
 80038e0:	69ba      	ldr	r2, [r7, #24]
 80038e2:	e841 2300 	strex	r3, r2, [r1]
 80038e6:	613b      	str	r3, [r7, #16]
   return(result);
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d1e6      	bne.n	80038bc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2220      	movs	r2, #32
 80038f2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2200      	movs	r2, #0
 8003900:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003902:	bf00      	nop
 8003904:	3754      	adds	r7, #84	@ 0x54
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr
	...

08003910 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003910:	b084      	sub	sp, #16
 8003912:	b580      	push	{r7, lr}
 8003914:	b084      	sub	sp, #16
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
 800391a:	f107 001c 	add.w	r0, r7, #28
 800391e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003922:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003926:	2b01      	cmp	r3, #1
 8003928:	d121      	bne.n	800396e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800392e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	68da      	ldr	r2, [r3, #12]
 800393a:	4b21      	ldr	r3, [pc, #132]	@ (80039c0 <USB_CoreInit+0xb0>)
 800393c:	4013      	ands	r3, r2
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800394e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003952:	2b01      	cmp	r3, #1
 8003954:	d105      	bne.n	8003962 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f000 fa92 	bl	8003e8c <USB_CoreReset>
 8003968:	4603      	mov	r3, r0
 800396a:	73fb      	strb	r3, [r7, #15]
 800396c:	e010      	b.n	8003990 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 fa86 	bl	8003e8c <USB_CoreReset>
 8003980:	4603      	mov	r3, r0
 8003982:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003988:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8003990:	7fbb      	ldrb	r3, [r7, #30]
 8003992:	2b01      	cmp	r3, #1
 8003994:	d10b      	bne.n	80039ae <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	f043 0206 	orr.w	r2, r3, #6
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	f043 0220 	orr.w	r2, r3, #32
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80039ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3710      	adds	r7, #16
 80039b4:	46bd      	mov	sp, r7
 80039b6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80039ba:	b004      	add	sp, #16
 80039bc:	4770      	bx	lr
 80039be:	bf00      	nop
 80039c0:	ffbdffbf 	.word	0xffbdffbf

080039c4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	f023 0201 	bic.w	r2, r3, #1
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80039d8:	2300      	movs	r3, #0
}
 80039da:	4618      	mov	r0, r3
 80039dc:	370c      	adds	r7, #12
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr

080039e6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80039e6:	b580      	push	{r7, lr}
 80039e8:	b084      	sub	sp, #16
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	6078      	str	r0, [r7, #4]
 80039ee:	460b      	mov	r3, r1
 80039f0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80039f2:	2300      	movs	r3, #0
 80039f4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003a02:	78fb      	ldrb	r3, [r7, #3]
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d115      	bne.n	8003a34 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003a14:	200a      	movs	r0, #10
 8003a16:	f7fd f9f9 	bl	8000e0c <HAL_Delay>
      ms += 10U;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	330a      	adds	r3, #10
 8003a1e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f000 fa25 	bl	8003e70 <USB_GetMode>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d01e      	beq.n	8003a6a <USB_SetCurrentMode+0x84>
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2bc7      	cmp	r3, #199	@ 0xc7
 8003a30:	d9f0      	bls.n	8003a14 <USB_SetCurrentMode+0x2e>
 8003a32:	e01a      	b.n	8003a6a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003a34:	78fb      	ldrb	r3, [r7, #3]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d115      	bne.n	8003a66 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003a46:	200a      	movs	r0, #10
 8003a48:	f7fd f9e0 	bl	8000e0c <HAL_Delay>
      ms += 10U;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	330a      	adds	r3, #10
 8003a50:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 fa0c 	bl	8003e70 <USB_GetMode>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d005      	beq.n	8003a6a <USB_SetCurrentMode+0x84>
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2bc7      	cmp	r3, #199	@ 0xc7
 8003a62:	d9f0      	bls.n	8003a46 <USB_SetCurrentMode+0x60>
 8003a64:	e001      	b.n	8003a6a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e005      	b.n	8003a76 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2bc8      	cmp	r3, #200	@ 0xc8
 8003a6e:	d101      	bne.n	8003a74 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e000      	b.n	8003a76 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003a74:	2300      	movs	r3, #0
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3710      	adds	r7, #16
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
	...

08003a80 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003a80:	b084      	sub	sp, #16
 8003a82:	b580      	push	{r7, lr}
 8003a84:	b086      	sub	sp, #24
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	6078      	str	r0, [r7, #4]
 8003a8a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003a8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003a92:	2300      	movs	r3, #0
 8003a94:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	613b      	str	r3, [r7, #16]
 8003a9e:	e009      	b.n	8003ab4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	3340      	adds	r3, #64	@ 0x40
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	4413      	add	r3, r2
 8003aaa:	2200      	movs	r2, #0
 8003aac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	3301      	adds	r3, #1
 8003ab2:	613b      	str	r3, [r7, #16]
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	2b0e      	cmp	r3, #14
 8003ab8:	d9f2      	bls.n	8003aa0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003aba:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d11c      	bne.n	8003afc <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	68fa      	ldr	r2, [r7, #12]
 8003acc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003ad0:	f043 0302 	orr.w	r3, r3, #2
 8003ad4:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ada:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	601a      	str	r2, [r3, #0]
 8003afa:	e005      	b.n	8003b08 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b00:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003b0e:	461a      	mov	r2, r3
 8003b10:	2300      	movs	r3, #0
 8003b12:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003b14:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d10d      	bne.n	8003b38 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003b1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d104      	bne.n	8003b2e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003b24:	2100      	movs	r1, #0
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f000 f968 	bl	8003dfc <USB_SetDevSpeed>
 8003b2c:	e008      	b.n	8003b40 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003b2e:	2101      	movs	r1, #1
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f000 f963 	bl	8003dfc <USB_SetDevSpeed>
 8003b36:	e003      	b.n	8003b40 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003b38:	2103      	movs	r1, #3
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f000 f95e 	bl	8003dfc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003b40:	2110      	movs	r1, #16
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f000 f8fa 	bl	8003d3c <USB_FlushTxFifo>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d001      	beq.n	8003b52 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 f924 	bl	8003da0 <USB_FlushRxFifo>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d001      	beq.n	8003b62 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b68:	461a      	mov	r2, r3
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b74:	461a      	mov	r2, r3
 8003b76:	2300      	movs	r3, #0
 8003b78:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b80:	461a      	mov	r2, r3
 8003b82:	2300      	movs	r3, #0
 8003b84:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b86:	2300      	movs	r3, #0
 8003b88:	613b      	str	r3, [r7, #16]
 8003b8a:	e043      	b.n	8003c14 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	015a      	lsls	r2, r3, #5
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	4413      	add	r3, r2
 8003b94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003b9e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003ba2:	d118      	bne.n	8003bd6 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d10a      	bne.n	8003bc0 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	015a      	lsls	r2, r3, #5
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	4413      	add	r3, r2
 8003bb2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003bbc:	6013      	str	r3, [r2, #0]
 8003bbe:	e013      	b.n	8003be8 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	015a      	lsls	r2, r3, #5
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	4413      	add	r3, r2
 8003bc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003bcc:	461a      	mov	r2, r3
 8003bce:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003bd2:	6013      	str	r3, [r2, #0]
 8003bd4:	e008      	b.n	8003be8 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	015a      	lsls	r2, r3, #5
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	4413      	add	r3, r2
 8003bde:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003be2:	461a      	mov	r2, r3
 8003be4:	2300      	movs	r3, #0
 8003be6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	015a      	lsls	r2, r3, #5
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	4413      	add	r3, r2
 8003bf0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	015a      	lsls	r2, r3, #5
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	4413      	add	r3, r2
 8003c02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c06:	461a      	mov	r2, r3
 8003c08:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003c0c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	3301      	adds	r3, #1
 8003c12:	613b      	str	r3, [r7, #16]
 8003c14:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003c18:	461a      	mov	r2, r3
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d3b5      	bcc.n	8003b8c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c20:	2300      	movs	r3, #0
 8003c22:	613b      	str	r3, [r7, #16]
 8003c24:	e043      	b.n	8003cae <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	015a      	lsls	r2, r3, #5
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	4413      	add	r3, r2
 8003c2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003c38:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003c3c:	d118      	bne.n	8003c70 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d10a      	bne.n	8003c5a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	015a      	lsls	r2, r3, #5
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	4413      	add	r3, r2
 8003c4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c50:	461a      	mov	r2, r3
 8003c52:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003c56:	6013      	str	r3, [r2, #0]
 8003c58:	e013      	b.n	8003c82 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	015a      	lsls	r2, r3, #5
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	4413      	add	r3, r2
 8003c62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c66:	461a      	mov	r2, r3
 8003c68:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003c6c:	6013      	str	r3, [r2, #0]
 8003c6e:	e008      	b.n	8003c82 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	015a      	lsls	r2, r3, #5
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	4413      	add	r3, r2
 8003c78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	2300      	movs	r3, #0
 8003c80:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	015a      	lsls	r2, r3, #5
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	4413      	add	r3, r2
 8003c8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c8e:	461a      	mov	r2, r3
 8003c90:	2300      	movs	r3, #0
 8003c92:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	015a      	lsls	r2, r3, #5
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	4413      	add	r3, r2
 8003c9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003ca6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	3301      	adds	r3, #1
 8003cac:	613b      	str	r3, [r7, #16]
 8003cae:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d3b5      	bcc.n	8003c26 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	68fa      	ldr	r2, [r7, #12]
 8003cc4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003cc8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ccc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8003cda:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003cdc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d105      	bne.n	8003cf0 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	699b      	ldr	r3, [r3, #24]
 8003ce8:	f043 0210 	orr.w	r2, r3, #16
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	699a      	ldr	r2, [r3, #24]
 8003cf4:	4b0f      	ldr	r3, [pc, #60]	@ (8003d34 <USB_DevInit+0x2b4>)
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	687a      	ldr	r2, [r7, #4]
 8003cfa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003cfc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d005      	beq.n	8003d10 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	699b      	ldr	r3, [r3, #24]
 8003d08:	f043 0208 	orr.w	r2, r3, #8
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003d10:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d105      	bne.n	8003d24 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	699a      	ldr	r2, [r3, #24]
 8003d1c:	4b06      	ldr	r3, [pc, #24]	@ (8003d38 <USB_DevInit+0x2b8>)
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003d24:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3718      	adds	r7, #24
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003d30:	b004      	add	sp, #16
 8003d32:	4770      	bx	lr
 8003d34:	803c3800 	.word	0x803c3800
 8003d38:	40000004 	.word	0x40000004

08003d3c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b085      	sub	sp, #20
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003d46:	2300      	movs	r3, #0
 8003d48:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	3301      	adds	r3, #1
 8003d4e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003d56:	d901      	bls.n	8003d5c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003d58:	2303      	movs	r3, #3
 8003d5a:	e01b      	b.n	8003d94 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	691b      	ldr	r3, [r3, #16]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	daf2      	bge.n	8003d4a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003d64:	2300      	movs	r3, #0
 8003d66:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	019b      	lsls	r3, r3, #6
 8003d6c:	f043 0220 	orr.w	r2, r3, #32
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	3301      	adds	r3, #1
 8003d78:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003d80:	d901      	bls.n	8003d86 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e006      	b.n	8003d94 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	691b      	ldr	r3, [r3, #16]
 8003d8a:	f003 0320 	and.w	r3, r3, #32
 8003d8e:	2b20      	cmp	r3, #32
 8003d90:	d0f0      	beq.n	8003d74 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003d92:	2300      	movs	r3, #0
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3714      	adds	r7, #20
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr

08003da0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b085      	sub	sp, #20
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003da8:	2300      	movs	r3, #0
 8003daa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	3301      	adds	r3, #1
 8003db0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003db8:	d901      	bls.n	8003dbe <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e018      	b.n	8003df0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	691b      	ldr	r3, [r3, #16]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	daf2      	bge.n	8003dac <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2210      	movs	r2, #16
 8003dce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	3301      	adds	r3, #1
 8003dd4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003ddc:	d901      	bls.n	8003de2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e006      	b.n	8003df0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	691b      	ldr	r3, [r3, #16]
 8003de6:	f003 0310 	and.w	r3, r3, #16
 8003dea:	2b10      	cmp	r3, #16
 8003dec:	d0f0      	beq.n	8003dd0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003dee:	2300      	movs	r3, #0
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3714      	adds	r7, #20
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b085      	sub	sp, #20
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	460b      	mov	r3, r1
 8003e06:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	78fb      	ldrb	r3, [r7, #3]
 8003e16:	68f9      	ldr	r1, [r7, #12]
 8003e18:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003e20:	2300      	movs	r3, #0
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3714      	adds	r7, #20
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr

08003e2e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8003e2e:	b480      	push	{r7}
 8003e30:	b085      	sub	sp, #20
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	68fa      	ldr	r2, [r7, #12]
 8003e44:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8003e48:	f023 0303 	bic.w	r3, r3, #3
 8003e4c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	68fa      	ldr	r2, [r7, #12]
 8003e58:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e5c:	f043 0302 	orr.w	r3, r3, #2
 8003e60:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003e62:	2300      	movs	r3, #0
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3714      	adds	r7, #20
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr

08003e70 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	695b      	ldr	r3, [r3, #20]
 8003e7c:	f003 0301 	and.w	r3, r3, #1
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	370c      	adds	r7, #12
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b085      	sub	sp, #20
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003e94:	2300      	movs	r3, #0
 8003e96:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	3301      	adds	r3, #1
 8003e9c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003ea4:	d901      	bls.n	8003eaa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e022      	b.n	8003ef0 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	691b      	ldr	r3, [r3, #16]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	daf2      	bge.n	8003e98 <USB_CoreReset+0xc>

  count = 10U;
 8003eb2:	230a      	movs	r3, #10
 8003eb4:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8003eb6:	e002      	b.n	8003ebe <USB_CoreReset+0x32>
  {
    count--;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	3b01      	subs	r3, #1
 8003ebc:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d1f9      	bne.n	8003eb8 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	691b      	ldr	r3, [r3, #16]
 8003ec8:	f043 0201 	orr.w	r2, r3, #1
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	3301      	adds	r3, #1
 8003ed4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003edc:	d901      	bls.n	8003ee2 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e006      	b.n	8003ef0 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	f003 0301 	and.w	r3, r3, #1
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d0f0      	beq.n	8003ed0 <USB_CoreReset+0x44>

  return HAL_OK;
 8003eee:	2300      	movs	r3, #0
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3714      	adds	r7, #20
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <memset>:
 8003efc:	4402      	add	r2, r0
 8003efe:	4603      	mov	r3, r0
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d100      	bne.n	8003f06 <memset+0xa>
 8003f04:	4770      	bx	lr
 8003f06:	f803 1b01 	strb.w	r1, [r3], #1
 8003f0a:	e7f9      	b.n	8003f00 <memset+0x4>

08003f0c <__libc_init_array>:
 8003f0c:	b570      	push	{r4, r5, r6, lr}
 8003f0e:	4d0d      	ldr	r5, [pc, #52]	@ (8003f44 <__libc_init_array+0x38>)
 8003f10:	4c0d      	ldr	r4, [pc, #52]	@ (8003f48 <__libc_init_array+0x3c>)
 8003f12:	1b64      	subs	r4, r4, r5
 8003f14:	10a4      	asrs	r4, r4, #2
 8003f16:	2600      	movs	r6, #0
 8003f18:	42a6      	cmp	r6, r4
 8003f1a:	d109      	bne.n	8003f30 <__libc_init_array+0x24>
 8003f1c:	4d0b      	ldr	r5, [pc, #44]	@ (8003f4c <__libc_init_array+0x40>)
 8003f1e:	4c0c      	ldr	r4, [pc, #48]	@ (8003f50 <__libc_init_array+0x44>)
 8003f20:	f000 f818 	bl	8003f54 <_init>
 8003f24:	1b64      	subs	r4, r4, r5
 8003f26:	10a4      	asrs	r4, r4, #2
 8003f28:	2600      	movs	r6, #0
 8003f2a:	42a6      	cmp	r6, r4
 8003f2c:	d105      	bne.n	8003f3a <__libc_init_array+0x2e>
 8003f2e:	bd70      	pop	{r4, r5, r6, pc}
 8003f30:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f34:	4798      	blx	r3
 8003f36:	3601      	adds	r6, #1
 8003f38:	e7ee      	b.n	8003f18 <__libc_init_array+0xc>
 8003f3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f3e:	4798      	blx	r3
 8003f40:	3601      	adds	r6, #1
 8003f42:	e7f2      	b.n	8003f2a <__libc_init_array+0x1e>
 8003f44:	08003f8c 	.word	0x08003f8c
 8003f48:	08003f8c 	.word	0x08003f8c
 8003f4c:	08003f8c 	.word	0x08003f8c
 8003f50:	08003f90 	.word	0x08003f90

08003f54 <_init>:
 8003f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f56:	bf00      	nop
 8003f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f5a:	bc08      	pop	{r3}
 8003f5c:	469e      	mov	lr, r3
 8003f5e:	4770      	bx	lr

08003f60 <_fini>:
 8003f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f62:	bf00      	nop
 8003f64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f66:	bc08      	pop	{r3}
 8003f68:	469e      	mov	lr, r3
 8003f6a:	4770      	bx	lr
